BROKER SCHEMA ib.visa.esb.bth.mgrcar
PATH ib.visa.esb.bth;

CREATE COMPUTE MODULE MF_ESB_BTH_FINPROCESO_ControlError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
--((1)) se cambia el semaforo a verde
		SET OutputRoot.XMLNSC.MENSAJE.PROCESANDO = getNO();

		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE MF_ESB_BTH_FINPROCESO_EjecutarFinalizacionCarga
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		
		
		CALL armarMensajeLogProceso(OutputRoot,
									InputRoot.MQRFH2.usr.Batch.idProceso, 
									InputRoot.MQRFH2.usr.Batch.Mgr.idTransaccion,  --TABLA PROCESO MIGRACION 
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se termino de migrar el archivo , finalizando el proceso ');
		
		PROPAGATE TO TERMINAL 1;
				 
		CALL actualizarAfiliacionMigracion(BrokerName , CURRENT_TIMESTAMP ,BrokerName ,CAST(InputRoot.MQRFH2.usr.Parametros.Batch.Mgr.idTransaccion AS INTEGER));
				
		CALL armarMensajeLogProceso(OutputRoot,
									InputRoot.MQRFH2.usr.Batch.idProceso, 
									InputRoot.MQRFH2.usr.Batch.Mgr.idTransaccion,  --TABLA PROCESO MIGRACION   
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se termino de actualizar las afiliaciones , finalizando el proceso ');	
																			
		--CALL actualizarProcesoMigracionFechaFin(CAST(InputRoot.MQRFH2.usr.Batch.Mgr.idTransaccion AS INTEGER),CURRENT_TIMESTAMP);
		PROPAGATE TO TERMINAL 1;
		
		
		--TODO
		--TRUNCAR TABLA TEMPORAL
		--GENERAR ARCHIVO
		--SPRESB.MIGRACION_GENERAR_ARCHIVO_LOG
		CALL obtenerLogMigracion(Environment.Resultset1[]);
		
		DECLARE refResult REFERENCE TO Environment.Resultset1;			
		
		WHILE LASTMOVE(refResult) DO
			SET OutputRoot.XMLNSC.resultado = refResult;			
			SET OutputLocalEnvironment.Destination.File.Directory = REPLACE(Environment.MQRFH2.usr.Servicio.PATHFILERROR,' ','') || 'temp/';
		SET OutputLocalEnvironment.Destination.File.Name = REPLACE(Environment.MQRFH2.usr.Batch.Mgr.nombreArchivo,'csv','dat') || '.log';
			PROPAGATE TO TERMINAL 4;
			MOVE refResult NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;
		
		SET OutputLocalEnvironment.Destination.File.Directory = REPLACE(Environment.MQRFH2.usr.Servicio.PATHFILERROR,' ','') || 'temp/';
		SET OutputLocalEnvironment.Destination.File.Name = REPLACE(Environment.MQRFH2.usr.Batch.Mgr.nombreArchivo,'csv','dat') || '.log';
		PROPAGATE TO TERMINAL 0;
		
		
		
		
		CALL armarMensajeLogProceso(OutputRoot,
									InputRoot.MQRFH2.usr.Batch.idProceso, 
									InputRoot.MQRFH2.usr.Batch.Mgr.idTransaccion,  --TABLA PROCESO MIGRACION   
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se termino de generar el archivo de log , finalizando el proceso ');
		SET Environment.Archivo = TRIM(InputRoot.MQRFH2.usr.Servicio.PATHFILERROR) || 'temp/';
		PROPAGATE TO TERMINAL 1;
		
		
		--CALL truncarTabla('SPR','PAGO_TEMPORAL_MIGRACION');
		--CALL truncarTabla('SPR','LOG_MIGRACION');
		
		CALL armarMensajeLogProceso(OutputRoot,
									InputRoot.MQRFH2.usr.Batch.idProceso, 
									InputRoot.MQRFH2.usr.Batch.Mgr.idTransaccion,  --TABLA PROCESO MIGRACION   
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se trunco la tabla temporal , finalizando el proceso ');
		PROPAGATE TO TERMINAL 1;
		
		
		
		
		CALL armarMensajeLogProceso(OutputRoot,
									InputRoot.MQRFH2.usr.Batch.idProceso, 
									InputRoot.MQRFH2.usr.Batch.Mgr.idTransaccion,  --TABLA PROCESO MIGRACION   
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'El proceso ha finalizado');
		PROPAGATE TO TERMINAL 1;
		
		
		
			--((3)) se cambia el semaforo a verde
		SET OutputRoot.XMLNSC.MENSAJE.PROCESANDO = getNO();
		PROPAGATE TO TERMINAL 2 ;
		
		
		/*
--((1)) hacer que cambie el estado de un proceso	
		CALL armarMensajeLogProceso(OutputRoot,
									InputRoot.MQRFH2.usr.Parametros.Batch.idProceso, 
									InputRoot.MQRFH2.usr.Parametros.Batch.Mgr.idTransaccion,   
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se termino de migrar los cargos , finalizando el proceso ');
		
		PROPAGATE TO TERMINAL 1;
  					
		
		--((3)) Se cambia de estado la instancia del proceso 
 
		/*CALL actualizarProcesoActualizacionTarjetasBD(CAST(InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion AS INTEGER),
														CURRENT_TIMESTAMP,
														NULL,
														CURRENT_TIMESTAMP,
														getEST_1_PROCESO()
														) ;
		*/		
		
		SET OutputRoot.Properties.MessageSet 	= 'MS_ESB_BATCH_GENERICO';
		SET OutputRoot.Properties.MessageType 	= 'MSJ_LANZADOR';
		SET OutputRoot.Properties.MessageFormat = 'CWF';			
		SET OutputRoot.MQMD.Format 					= 'MQHRF2  '; 
		SET OutputRoot.MQRFH2 = InputRoot.MQRFH2;				
		SET OutputRoot.MRM.MENSAJE.IDPROCESO 	= '26';
		SET OutputRoot.MRM.MENSAJE.FILLER 		= InputRoot.MQRFH2.usr.Parametros.Batch.Mgr.idTransaccion || '|' || InputBody.MENSAJE.IDTRANSACCION || '#' || InputRoot.MQRFH2.usr.Parametros.Batch.Mgr.nombreArchivo;
				
		PROPAGATE TO TERMINAL 2;			

		*/	
	--((5)) Envio de alertas al fin  del proceso
		
		SET Environment.Parametros = InputBody.MENSAJE.Parametros;		
		SET Environment.Parametros.Batch.horaFinProceso = obtenerFechaHoraActual(2);
		 
				
		CALL prepararMensajeCorreoAlerta(OutputRoot,getTIPO_ALERTA_2(),Environment.Parametros,NULL,NULL);
		PROPAGATE TO TERMINAL 3;
		
		
		
		RETURN FALSE;
	END;
END MODULE;




CREATE COMPUTE MODULE MF_ESB_BTH_FINPROCESO_MoverArchivoTemp
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN	
			
			
		SET OutputLocalEnvironment.Destination.File.Directory = REPLACE(Environment.MQRFH2.usr.Servicio.PATHFILERROR,' ','') || 'temp/';
		SET OutputLocalEnvironment.Destination.File.Name = REPLACE(Environment.MQRFH2.usr.Batch.Mgr.nombreArchivo,'csv','dat') || '.log';
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE MF_ESB_BTH_FINPROCESO_MoverArchivoFinal
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN	
		SET OutputRoot =  InputRoot;	
	SET OutputLocalEnvironment.Destination.File.Directory = REPLACE(Environment.MQRFH2.usr.Servicio.PATHFILERROR,' ','');
		SET OutputLocalEnvironment.Destination.File.Name = REPLACE(Environment.MQRFH2.usr.Batch.Mgr.nombreArchivo,'csv','dat') || '.log';
		RETURN TRUE;
	END;
END MODULE;