BROKER SCHEMA ib.visa.esb.bth.mgrcar
PATH ib.visa.esb.bth;


CREATE COMPUTE MODULE MF_ESB_BTH_GETDETALLE_ControlarError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		
		--((0.1)) Registrar el autorizador de transacciones
		DECLARE intIdTransaccion INTEGER; 	
		CALL insertarProcesoAutorizadorTransaccionBD(getID_PROCESO_5(),
														CURRENT_TIMESTAMP,
														NULL,
														NULL,
														NULL,
														getEST_0_PROCESO(),
														CURRENT_TIMESTAMP,
														intIdTransaccion);
		SET Environment.Variables.IdTransaccion = intIdTransaccion;
		--TODO												
		--CALL prepararMensajeCorreoAlerta(OutputRoot,getTIPO_ALERTA_1(),Environment.Parametros,NULL,NULL);
			--PROPAGATE TO TERMINAL 4;
		
		--CALL obtenerAgrupacionLotes(,Environment.ResultSet1[]);
																
														
	END;
END MODULE;


CREATE COMPUTE MODULE MF_ESB_BTH_GETDETALLE_DescomponerProceso
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN	
		SET Environment.Variables.MQRFH2 = InputRoot.MQRFH2;	
		DECLARE refParam REFERENCE TO Environment.Variables.MQRFH2.usr.Parametros;
		DECLARE cantidadFilaMemoria INT refParam.Servicio.CANROWSMEM;
		DECLARE cantidadProcesos INT refParam.Servicio.CANPROC;		
		DECLARE index INT 0;
		DECLARE indexVuelta INT 1;
		DECLARE cantidadMensajes INT;
		
		
		SET Environment.Variables.cantidadFilaMemoria = cantidadFilaMemoria;
		SET Environment.Variables.cantidadProcesos = cantidadProcesos;
	
		
		
		/*DECLARE cantidadCargos,cantidadVueltas,cantidadFilasPorProceso,restoFilasPorProceso INT 0;
		
		CALL obtenerCantidadCargos(cantidadCargos);
		
		DECLARE valorEntero INTEGER 0;
		DECLARE valorCadena CHARACTER '';
		--CALL actualizarOperacion('CANTOTREGISTROS','',cantidadCargos,valorCadena,valorEntero);		
				
		
		SET cantidadVueltas = cantidadCargos / cantidadFilaMemoria;
		
		 
		SET cantidadFilasPorProceso = cantidadFilaMemoria/cantidadProcesos;
		SET Environment.Variables.cantidadCargos = cantidadCargos;
		DECLARE ultimoRegistro INT 0;
		DECLARE cantidadRegistros INT 0;
		
		CREATE FIELD Environment.XMLNSC.MENSAJE.REGISTROS;
		
		DECLARE refPagina REFERENCE TO Environment.XMLNSC.MENSAJE; 		
		WHILE indexVuelta <= cantidadVueltas DO
			SET cantidadRegistros = cantidadRegistros + 1;
			MOVE refPagina LASTCHILD;
			CREATE FIELD refPagina.PAGINA;					
			--CREATE FIELD Environment.XMLNSC.REGISTROS.PAGINA;
			--DECLARE refPagina REFERENCE TO Environment.XMLNSC.REGISTROS;
			
			WHILE index < cantidadProcesos DO			
				MOVE refPagina LASTCHILD;
				SET refPagina.regAntes = ultimoRegistro + (cantidadFilasPorProceso*index)+1;
				SET refPagina.regDespues = ultimoRegistro + cantidadFilasPorProceso*(index+1);
				MOVE refPagina PARENT;
				CREATE LASTCHILD OF refPagina NAME 'PAGINA';
				SET index = index + 1;
			END WHILE;
			
			SET ultimoRegistro = ultimoRegistro + cantidadFilasPorProceso*(index);
			
			SET restoFilasPorProceso = MOD(cantidadFilaMemoria,cantidadProcesos);
			
			IF restoFilasPorProceso > 0 THEN
				MOVE refPagina LASTCHILD;
				SET refPagina.regAntes = ultimoRegistro;
				SET refPagina.regDespues = ultimoRegistro + restoFilasPorProceso;
				SET ultimoRegistro =  ultimoRegistro + restoFilasPorProceso;
				MOVE refPagina PARENT;		
			ELSE
				--DELETE LASTCHILD OF Environment.XMLNSC.MENSAJE.REGISTROS;
				DELETE LASTCHILD OF refPagina;
			END IF;
			
			--SET OutputRoot.XMLNSC.MENSAJE.REGISTROS = Environment.XMLNSC.REGISTROS;
			
			
			--PROPAGATE TO TERMINAL 0 ;
			
			--DELETE FIELD Environment.XMLNSC.REGISTROS;
			
			MOVE refPagina PARENT;
			CREATE LASTCHILD OF refPagina NAME 'REGISTROS';
			
			SET indexVuelta = indexVuelta + 1 ; 
			
			SET index = 0;
		
		END WHILE;
		
					
	
		
		DECLARE restoVueltas INT MOD(cantidadCargos,cantidadFilaMemoria);
		
		
		SET Environment.Variables.restoVueltas = restoVueltas;
		
		IF restoVueltas > 0 THEN
			SET cantidadRegistros = cantidadRegistros + 1;
			--CREATE FIELD Environment.XMLNSC.REGISTROS.PAGINA;
			
			--DECLARE refPagina REFERENCE TO Environment.XMLNSC.REGISTROS;
			
			MOVE refPagina LASTCHILD;
			CREATE FIELD refPagina.PAGINA;
			
			
			SET cantidadFilasPorProceso = restoVueltas/cantidadProcesos;
			
			WHILE index < cantidadProcesos DO			
				MOVE refPagina LASTCHILD;
				SET refPagina.regAntes = ultimoRegistro + (cantidadFilasPorProceso*index +1);
				SET refPagina.regDespues = ultimoRegistro + cantidadFilasPorProceso*(index+1);
				MOVE refPagina PARENT;
				CREATE LASTCHILD OF refPagina NAME 'PAGINA';
				SET index = index + 1;
			END WHILE;
			
			SET restoFilasPorProceso = MOD(restoVueltas,cantidadProcesos);
			
			
			SET Environment.Variables.restoFilasPorProceso = restoFilasPorProceso;
			
			SET ultimoRegistro = ultimoRegistro + cantidadFilasPorProceso*(index)+1;
			
			IF restoFilasPorProceso > 0 THEN
				MOVE refPagina LASTCHILD;
				SET refPagina.regAntes = ultimoRegistro;
				SET refPagina.regDespues = ultimoRegistro + restoFilasPorProceso - 1;
				MOVE refPagina PARENT;
			ELSE
				DELETE LASTCHILD OF refPagina;
			END IF;
			
			--SET OutputRoot.XMLNSC.MENSAJE.REGISTROS = Environment.XMLNSC.REGISTROS;			
			--PROPAGATE TO TERMINAL 0 ;
			--MOVE refPagina PARENT;--MENSAJE
			--DELETE LASTCHILD OF refPagina;
		END IF;
		
		DECLARE refOut REFERENCE TO Environment.XMLNSC.MENSAJE.REGISTROS;
		
		DECLARE ixLoop INT 1;
		*/
		--WHILE LASTMOVE(refOut) DO

			SET OutputRoot.MQMD.Format 					= 'MQHRF2  '; 
			SET OutputRoot.MQRFH2.usr.Parametros		= InputRoot.MQRFH2.usr.Parametros;						
			--SET OutputRoot.XMLNSC.MENSAJE.REGISTROS = refOut;
			SET OutputRoot.XMLNSC.MENSAJE.CANTOTREGISTRO = 0;
			SET OutputRoot.XMLNSC.MENSAJE.CANPROCREGISTRO = 0;
			SET OutputRoot.XMLNSC.MENSAJE.CANTMENSAJE = 0;
			PROPAGATE TO TERMINAL 0;
			
			/*IF ixLoop = cantidadRegistros THEN
				SET OutputRoot.XMLNSC.MENSAJE.FINCOLA = TRUE;
				IF cantidadFilaMemoria >= cantidadCargos THEN
					SET OutputRoot.XMLNSC.MENSAJE.CANPROCREGISTRO =  cantidadCargos;
				ELSE  
					SET OutputRoot.XMLNSC.MENSAJE.CANPROCREGISTRO = cantidadCargos - cantidadFilaMemoria  ;
				END IF;
				
			ELSE
				SET OutputRoot.XMLNSC.MENSAJE.FINCOLA = FALSE;
			END IF;
				
			PROPAGATE TO TERMINAL 0 ;
			SET ixLoop = ixLoop+1;	
			MOVE refOut NEXTSIBLING REPEAT TYPE NAME;
			
		END WHILE;*/
		
	/*	--TODO
		SET OutputRoot.XMLNSC.MENSAJE.CANTMENSAJE = cantidadProcesos;	
		PROPAGATE TO TERMINAL 1;
		*/
		
			
		CALL prepararMensajeCorreoAlerta(OutputRoot,getTIPO_ALERTA_1(),refParam,NULL,NULL);
		PROPAGATE TO TERMINAL 2;
		
		
		RETURN FALSE;														
	END;
END MODULE;



CREATE COMPUTE MODULE MF_ESB_BTH_GETDETALLE_ObtenerCargos
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.Variables.codigo = getMsgIdValor('MGRCAR2',TRUE);
		SET Environment.Variables.MQRFH2 = InputRoot.MQRFH2;			
		DECLARE intFila,cantidadGrupos,cantidadRegistros,cantidadRegistrosPorGrupo INT;		
					
		
		DECLARE refParam REFERENCE TO Environment.Variables.MQRFH2.usr.Parametros;
		
		
		--INICIO DEL PROCESO DE OBTENER CARGOS PFRA MIGRAR
		
		CALL armarMensajeLogProceso(OutputRoot,
									CAST(refParam.Batch.idProceso AS CHARACTER), 
									CAST(refParam.Batch.Mgr.idTransaccion AS CHARACTER),    
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se Inicia la busqueda de cargos para migrar ');
		
		PROPAGATE TO TERMINAL 3;
		
		
		
		DECLARE cantidadFilaMemoria INT refParam.Servicio.CANROWSMEM;
		DECLARE cantidadCargos INT 0;
		
		DECLARE cantidadVueltas INT 0 ;
		DECLARE loopIndex INT 1;
		
		CALL obtenerCantidadCargos(cantidadCargos);
		
	
		
		SET cantidadVueltas = cantidadCargos / cantidadFilaMemoria;
		
		IF MOD(cantidadCargos,cantidadFilaMemoria) > 0 THEN
			SET cantidadVueltas = cantidadVueltas + 1;
		END IF;
		
		
		SET Environment.Variables.cantidadCargos = cantidadCargos;
		SET Environment.Variables.cantidadVueltas = cantidadVueltas;
		SET Environment.Variables.cantidadFilaMemoria = cantidadFilaMemoria;
		
		PROPAGATE TO TERMINAL 1;
		
		/*WHILE loopIndex <= cantidadVueltas DO
		
		SET intFila = 0;
		SET cantidadGrupos = 0;
		SET cantidadRegistros = 0;
		SET cantidadRegistrosPorGrupo = 0;
		
		
		--CALL buscarCargosMigracion(Environment.ResultSet1[]);
							
		CALL buscarCargosMigracionTemporal(loopIndex,cantidadFilaMemoria,Environment.ResultSet1[]);
		SET loopIndex = loopIndex + 1;
				
		CREATE FIELD Environment.XMLNSC.Registros.REGISTRO;
		
		DECLARE refResult REFERENCE TO Environment.ResultSet1;
		
		
		WHILE LASTMOVE(refResult) DO
			SET cantidadRegistros = cantidadRegistros +1 ;
			SET cantidadRegistrosPorGrupo = cantidadRegistrosPorGrupo + 1;
			DECLARE refFila REFERENCE TO Environment.XMLNSC.Registros;
			MOVE refFila LASTCHILD;			
			SET intFila  = intFila +1;
			IF intFila = 400 THEN								
				SET intFila = 0;
				DELETE LASTCHILD OF Environment.XMLNSC.Registros;		
				SET OutputRoot.MQMD.CorrelId				= CAST(refParam.Batch.msgIdTransaccion AS BLOB);					
				SET OutputRoot.XMLNSC.MENSAJE.REGISTROS = Environment.XMLNSC.Registros;	
				SET OutputRoot.XMLNSC.MENSAJE.IDGRUPO = refParam.Batch.msgIdTransaccion;
				SET OutputRoot.XMLNSC.MENSAJE.IDTRANSACCION = refParam.Batch.msgIdTransaccion;
				SET OutputRoot.XMLNSC.MENSAJE.REGISTROSGRUPO = cantidadRegistrosPorGrupo;							
				SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaRecepArchivo('MGRCAR2');
				SET cantidadGrupos = cantidadGrupos+1;								
				PROPAGATE TO TERMINAL 1;							
				DELETE FIELD Environment.XMLNSC.Registros;	
				CREATE FIELD Environment.XMLNSC.Registros.REGISTRO;
				SET cantidadRegistrosPorGrupo = 0;															
			ELSE					
				SET refFila = refResult;								
				CREATE LASTCHILD OF Environment.XMLNSC.Registros NAME 'REGISTRO';					
				
			END IF;			
			
			MOVE refResult NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;		
		
		IF FIELDTYPE(Environment.XMLNSC.Registros.REGISTRO) IS NOT NULL THEN
			DELETE LASTCHILD OF Environment.XMLNSC.Registros;
			SET OutputRoot.MQMD.CorrelId				= CAST(refParam.Batch.msgIdTransaccion AS BLOB);				
			SET OutputRoot.XMLNSC.MENSAJE.REGISTROS = Environment.XMLNSC.Registros;
			SET OutputRoot.XMLNSC.MENSAJE.IDGRUPO = refParam.Batch.msgIdTransaccion;
			SET OutputRoot.XMLNSC.MENSAJE.IDTRANSACCION = refParam.Batch.msgIdTransaccion;
			SET OutputRoot.XMLNSC.MENSAJE.REGISTROSGRUPO = cantidadRegistrosPorGrupo;	
			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaRecepArchivo('MGRCAR2');
			SET cantidadGrupos = cantidadGrupos+1;			
			SET cantidadRegistrosPorGrupo = 0 ;							
				PROPAGATE TO TERMINAL 1;							
		END IF;
		
		DELETE FIELD Environment.XMLNSC.Registros;	
		
		END WHILE;
			
		CALL armarMensajeLogProceso(OutputRoot,
									CAST(refParam.Batch.idProceso AS CHARACTER), 
									CAST(refParam.Batch.Mgr.idTransaccion AS CHARACTER),    
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se encontraron { ' || CAST(cantidadRegistros AS CHARACTER) ||' } registros');
		
		PROPAGATE TO TERMINAL 3;
		
		
		
		SET OutputRoot.MQMD.Format 					= 'MQHRF2  '; 
		SET OutputRoot.MQRFH2.usr.Parametros		= refParam;		 		 				   
		SET OutputRoot.XMLNSC.MENSAJE.TOTALREGISTROS= cantidadRegistros; --cantidad registros de cargos
		SET OutputRoot.XMLNSC.MENSAJE.IDTRANSACCION = refParam.Batch.msgIdTransaccion;
		SET OutputRoot.XMLNSC.MENSAJE.FECHAPROCESO 	= refParam.Batch.fechaProceso;
		SET OutputRoot.XMLNSC.MENSAJE.COLAGETRECEP	= obtenerColaRecepArchivo('MGRCAR2');
		--SET OutputRoot.XMLNSC.MENSAJE.HORARIO	 	= refParam.Batch.horario;
		SET OutputRoot.XMLNSC.MENSAJE.COLAHORARIO 	= 'IB.BTH.MGRCAR2.REGARCHIVO.REQ.01';
		SET OutputRoot.XMLNSC.MENSAJE.CANREGTRANS	= 400 ;
		SET OutputRoot.XMLNSC.MENSAJE.CANGRUPOS		= cantidadGrupos;
		SET OutputRoot.XMLNSC.MENSAJE.QMPROCESO		= QueueManagerName;								
		SET OutputRoot.XMLNSC.MENSAJE.PROCESAR 		= getSI();		
		--TODO :::fin
	
		PROPAGATE TO TERMINAL 2;
		*/
	END;
END MODULE;
