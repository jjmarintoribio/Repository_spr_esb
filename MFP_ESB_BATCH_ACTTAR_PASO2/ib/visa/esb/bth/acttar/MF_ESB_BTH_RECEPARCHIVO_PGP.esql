BROKER SCHEMA ib.visa.esb.bth.acttar
PATH ib.visa.esb.bth;

DECLARE cacheProcesoActTarPgp SHARED ROW;
  
CREATE COMPUTE MODULE MF_ESB_BTH_RECEPARCHIVO_PGP_CopiarArchivoPgp
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE campo NAME (getEST_ACTIVO() || SUBSTRING(InputLocalEnvironment.File.Name FROM 1 FOR 10));
		DECLARE refParam REFERENCE TO cacheProcesoActTarPgp.campo.Parametros;
		
		CREATE FIELD Environment.XMLNSC.FILETEMP;
		SET InputLocalEnvironment.XMLNSC.FILETEMP = InputRoot;
		--((1)) solo con el primer registro se va a obtener parametros
			
		SET OutputRoot.MQMD.MsgId	= getMsgId();
		SET OutputRoot.MQMD.CorrelId=OutputRoot.MQMD.MsgId; 
	 
		CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN 'XMLNSC';		 
		SET OutputRoot.XMLNSC.MENSAJE.IDPROCESO = getID_PROCESO_2();  

	   	SET cacheProcesoActTarPgp.campo.cantidad         = 0;
       	SET cacheProcesoActTarPgp.campo.grupo                 = 1;
       
       
        SET Environment.File.Name                                 = InputLocalEnvironment.File.Name;
        SET Environment.File.NameIdentificador        = SUBSTRING(InputLocalEnvironment.File.Name FROM 1 FOR 10);
        SET Environment.File.tipoArchivoAlignet        = 'ALIGNET';
        SET Environment.File.MessageSet         = 'MSJ_TARJETA_RES_PGP';
         
        IF CONTAINS(InputLocalEnvironment.File.Name,'BCP') THEN
                SET Environment.File.MessageSet                         = 'MSJ_TARJETA_RES_BCP';
                SET Environment.File.tipoArchivoAlignet                = 'BCP';
        END IF;
        
		SET Environment.InputRoot =InputRoot;
		SET Environment.FinleName =InputLocalEnvironment.File.Name;
--		--0309
		SET OutputLocalEnvironment.XMLNSC.FILETEMP = InputLocalEnvironment.XMLNSC.FILETEMP;
	 			 
		PROPAGATE TO TERMINAL 1 ;
		
--		DECLARE blnSleep BOOLEAN;
--		SET blnSleep = SLEEP(20000);
--
--		
--		--((2)) copiar el BLOB del archivo		 
--		SET OutputLocalEnvironment.Destination.File.Directory 	= '/app/visa/esb/batch/ftp/tarjetas/';
--		SET OutputLocalEnvironment.Destination.File.Name 		= InputLocalEnvironment.File.Name || 'cpy';
		
--		SET OutputRoot  = InputRoot;
		
--		PROPAGATE TO TERMINAL 2 ;
		
		RETURN FALSE;
	END;
END MODULE;
		
CREATE COMPUTE MODULE MF_ESB_BTH_RECEPARCHIVO_PGP_ValidarRegistro
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		   
		--((1)) Registro del proceso
		DECLARE campo NAME (getEST_ACTIVO() || SUBSTRING(InputLocalEnvironment.File.Name FROM 1 FOR 10));
		DECLARE refParam REFERENCE TO cacheProcesoActTarPgp.campo.Parametros;
			
		SET Environment.PARAMETROS = refParam;	

	IF (InputLocalEnvironment.File.Record = 1) THEN --0030
			
			SET OutputRoot.MQMD.MsgId	= getMsgId();
			SET OutputRoot.MQMD.CorrelId=OutputRoot.MQMD.MsgId; 
		 
			CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN 'XMLNSC';		 
			SET OutputRoot.XMLNSC.MENSAJE.IDPROCESO = getID_PROCESO_2(); 
		 
			SET cacheProcesoActTar.campo.cantidad 	= 0;
			SET cacheProcesoActTar.campo.grupo 		= 1;		 
		 
		 	SET Environment.File.Name 		= InputLocalEnvironment.File.Name;
		  	SET Environment.File.TimeStamp	= RIGHT(InputLocalEnvironment.File.TimeStamp,16);
		  	
		  	SET OutputLocalEnvironment.File.Name = InputLocalEnvironment.File.Name; --0809
			PROPAGATE TO TERMINAL 1;
			--TODO :::inicio
			CREATE FIELD cacheProcesoActTar.campo.Registros.REGISTRO;
			
--			IF(CAST(InputLocalEnvironment.XMLNSC.FILETEMP.BLOB.BLOB AS CHARACTER CCSID 1208) <> '') THEN
--				CALL crearTablaAfiliacionYReporteTemporal(CAST(refParam.Batch.idTransaccion AS CHARACTER));
--			END IF; 
			--TODO :::fin
	END IF;
--ELSE--030					
		DECLARE chrTipoArchivoPgp CHARACTER CAST(SUBSTRING(InputBody.BLOB FROM 1 FOR 1) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);

	
		IF (chrTipoArchivoPgp = 'D' OR chrTipoArchivoPgp = '9') THEN -- solo detalles

			--((2))Se envia un mensaje por cada grupo de mensajes
		
			IF ( cacheProcesoActTarPgp.campo.cantidad 	= refParam.Batch.cantRegistrosTransaccion) THEN
				
				SET OutputRoot.MQMD.CorrelId  		= refParam.Batch.msgIdTransaccion; -- para obtener todos los grupos con el get cuando se termine de leer el file
			  
				SET OutputRoot.MQRFH2.usr = refParam;   
				SET OutputRoot.XMLNSC.MENSAJE.IDTRANSACCION	= refParam.Batch.msgIdTransaccion;
				SET OutputRoot.XMLNSC.MENSAJE.IDGRUPO		= getMsgIdValor((getEST_ACTIVO() || SUBSTRING(InputLocalEnvironment.File.Name FROM 1 FOR 10)) || CAST(cacheProcesoActTarPgp.campo.grupo AS CHARACTER),FALSE);
				SET OutputRoot.XMLNSC.MENSAJE.REGISTROSGRUPO= cacheProcesoActTarPgp.campo.cantidad;
				SET OutputRoot.XMLNSC.MENSAJE.FECHAPROCESO 	= refParam.Batch.fechaProceso;
				
				--0809
				--SET OutputRoot.XMLNSC.MENSAJE.IDPROCESO 	= refParam.Batch.fechaProceso;
				--TODO :::inicio 030
					DELETE LASTCHILD OF cacheProcesoActTar.campo.Registros;
					SET OutputRoot.XMLNSC.MENSAJE.REGISTROS =cacheProcesoActTar.campo.Registros;  
	
					ROUTING : BEGIN ATOMIC 
						DELETE FIELD cacheProcesoActTar.campo.Registros;	
						CREATE FIELD cacheProcesoActTar.campo.Registros.REGISTRO;															
					END ROUTING ;
				--TODO :::fin  030		
					
				SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaRecepArchivo(refParam.General.IDENTIFICADOR);
		
				PROPAGATE TO TERMINAL 3; 

				SET cacheProcesoActTarPgp.campo.cantidad 	= 0;
				SET cacheProcesoActTarPgp.campo.grupo 		= CAST(cacheProcesoActTarPgp.campo.grupo AS INTEGER) + 1;				
				
			END IF; 
			
			--((3)) Se envia el detalle de cada registro a la cola temporal de recepcion 
			   
			SET cacheProcesoActTarPgp.campo.cantidad 	= CAST(cacheProcesoActTarPgp.campo.cantidad AS INTEGER) + 1;
			
			/*SET OutputRoot.Properties.MessageSet 	= 'MS_ESB_BATCH_ACTTARJETAS'; CAMBIO */
			--SET OutputRoot.Properties.MessageType         = CAST(refParam.Batch.MessageSet AS CHARACTER);
			SET OutputRoot.Properties.MessageFormat	= 'CWF';
			--
			 
			SET OutputRoot.MQMD.CorrelId  = getMsgIdValor((getEST_ACTIVO() || SUBSTRING(InputLocalEnvironment.File.Name FROM 1 FOR 10)) || CAST(cacheProcesoActTarPgp.campo.grupo AS CHARACTER),FALSE);			
	
			--Se parsea el mensaje  		
			CREATE LASTCHILD OF Environment DOMAIN 'MRM';			
			DECLARE parseOptions INTEGER BITOR(ValidateContent, ValidateValue, ValidateLocalError);

			IF CONTAINS(InputLocalEnvironment.File.Name,'BCP') THEN
				
				SET OutputRoot.Properties.MessageType 	= 'MSJ_TARJETA_RES_BCP';								               
                CREATE LASTCHILD OF Environment.MRM PARSE ( InputBody.BLOB
                                                               OPTIONS parseOptions
                                                               SET 'MS_ESB_BATCH_ACTTARJETAS'
																TYPE 'MSJ_TARJETA_RES_BCP' 
                                                               FORMAT 'CWF');
			ELSE
				
				SET OutputRoot.Properties.MessageType 	= 'MSJ_TARJETA_RES_PGP';			
				CREATE LASTCHILD OF Environment.MRM PARSE ( InputBody.BLOB
                                                               OPTIONS parseOptions
                                                               SET 'MS_ESB_BATCH_ACTTARJETAS'
																TYPE 'MSJ_TARJETA_RES_PGP' 
                                                               FORMAT 'CWF');
        	END IF;
											                        
								                        
								                        
								                        --030 COMENTADO
--			SET OutputRoot.XMLNSC	= Environment.MRM.MRM;								                        						
--			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaRecepArchivoDetalle(refParam.General.IDENTIFICADOR); 
--
--			PROPAGATE TO TERMINAL 2; --030

				DECLARE refFila REFERENCE TO cacheProcesoActTar.campo.Registros;
  				MOVE refFila LASTCHILD;  
				SET refFila = Environment.MRM.MRM.MENSAJE;
 				CREATE LASTCHILD OF  cacheProcesoActTar.campo.Registros NAME 'REGISTRO'; 
			
		END IF;
--	END IF; --030
	
		RETURN FALSE;
	END;

CREATE PROCEDURE crearTablaAfiliacionYReporteTemporal (
   												IN P_ID_TRANSACCION CHARACTER)		
LANGUAGE DATABASE
EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_CREAR_TEMPORALES";	

END MODULE;

CREATE COMPUTE MODULE MF_ESB_BTH_RECEPARCHIVO_PGP_GrabarParametros
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		--((1)) Registro del proceso
		DECLARE campo NAME (getEST_ACTIVO() || Environment.File.NameIdentificador);
		
		CREATE FIELD cacheProcesoActTarPgp.campo.Parametros;
		DECLARE refParam REFERENCE TO cacheProcesoActTarPgp.campo.Parametros;
 		
		DECLARE intIdTransaccion INTEGER; 	 
		CALL insertarProcesoActualizacionTarjetasBD(getID_PROCESO_2(),
														NULL,
														NULL,
														CURRENT_TIMESTAMP,
														Environment.File.Name,
														getEST_0_PROCESO(),
														CURRENT_TIMESTAMP,
														intIdTransaccion);

		--((1)) Guardado en memoria
		  
--		ROUTING : BEGIN ATOMIC 

			SET refParam.Servicio 	= InputBody.MENSAJE.PARAMETROS;
			SET refParam.General	= InputBody.MENSAJE.SERVICIO;
			SET refParam.ESB 		= InputBody.MENSAJE.PARAMETROSESB; 
			
			--((2)) Guardado de parametros del proceso batch 
			SET refParam.Batch.idProceso 			= CAST(getID_PROCESO_2() AS INTEGER);		
 			SET refParam.Batch.cantNodos			= COALESCE(refParam.Servicio.CANTINST, refParam.ESB.CANTINST);
			SET refParam.Batch.horaInicioProceso	= obtenerFechaHoraActualMasDias(2,1);
	   		SET refParam.Batch.fechaInicioProceso	= obtenerFechaActual(4);						   
			SET refParam.Batch.fechaProceso			= obtenerTimestampSinHora(CURRENT_DATE);
			SET refParam.Batch.fechaNombreArchivo  	= SUBSTRING(Environment.File.Name FROM POSITION( '.' IN Environment.File.Name) - 6 FOR 6);-- Formato(yyMMdd)
			SET refParam.Batch.nombreArchivo	   	= Environment.File.Name;			
			SET refParam.Batch.idTransaccion	   	= intIdTransaccion;
			SET refParam.Batch.msgIdTransaccion		= getMsgId(); --identificador unico del procesamiento de un archivo
			SET refParam.Batch.tipoArchivoAlignet 	= Environment.File.tipoArchivoAlignet;
			SET refParam.Batch.MessageSet           = Environment.File.MessageSet;
			-- ((3)) Se obtiene el horario de proceso
			
			DECLARE chrColaHorario, chrNroHorario CHARACTER '';
			--Cambio 16-12-2015
--			CALL calcularProcesoPorHorario(refParam.General.IDENTIFICADOR, refParam.Servicio.INTVHORAPRC1,
--																		   refParam.Servicio.INTVHORAPRC2,
--																		   chrColaHorario, chrNroHorario);
			
			SET chrColaHorario = 'IB.BTH.'  || refParam.General.IDENTIFICADOR || '.REGARCHIVO.REQ.01';
			SET chrNroHorario = '1';
			--FIN Cambio 16-12-2015
			
			DECLARE chrT1 CHARACTER refParam.Servicio.CANREGTRANS1;
			DECLARE chrT2 CHARACTER refParam.Servicio.CANREGTRANS2;
			DECLARE chrT3 CHARACTER refParam.Servicio.CANREGTRANS3;
			IF (chrNroHorario = '1') THEN
				SET refParam.Batch.cantRegistrosTransaccion =  chrT1;
			ELSEIF (chrNroHorario = '2') THEN
				SET refParam.Batch.cantRegistrosTransaccion =  chrT2;
			END IF; 
			
			SET refParam.Batch.horario	 	= chrNroHorario;
			SET refParam.Batch.colaHorario 	= chrColaHorario;		

			SET Environment.refParam = refParam; 
			
--		END ROUTING ;
				  
		--((2)) Registro de Log del Proceso
		
		IF(CAST(InputLocalEnvironment.XMLNSC.FILETEMP.BLOB.BLOB AS CHARACTER CCSID 1208) <> '') THEN --16122015
			CALL crearTablaAfiliacionYReporteTemporal(CAST(refParam.Batch.idTransaccion AS CHARACTER)); --22122015
			CALL armarMensajeLogProceso(OutputRoot,
											CAST(refParam.Batch.idProceso AS CHARACTER),
											CAST(refParam.Batch.idTransaccion AS CHARACTER),   
											getTIP_LOG_INFO(),
											MessageFlowLabel,
											'Se inicio la lectura del archivo: ' || refParam.Batch.nombreArchivo 
											);
		
			PROPAGATE TO TERMINAL 1;		
		--((2)) Envio de alertas al inicio del proceso
		
			IF (COALESCE(refParam.Servicio.NOTIFICA,getNO())= getSI()) THEN
				CALL prepararMensajeCorreoAlerta(OutputRoot,getTIPO_ALERTA_1(),refParam,NULL,NULL);
				PROPAGATE TO TERMINAL 2;
			END IF;--0309 --uncomment 0809
		END IF;
		--((3)) Envio de mensaje con los Parametros para el control de alertas 
		
		SET OutputRoot.XMLNSC 		= NULL;
		SET OutputRoot.MQMD.Format 					= 'MQHRF2  '; 
		SET OutputRoot.MQRFH2.usr.Parametros = cacheProcesoActTarPgp.campo.Parametros;
		
--		SET Environment.InputRoot.BLOB =InputRoot.BLOB;
--		SET Environment.FinleName =InputLocalEnvironment.File.Name;
		SET OutputLocalEnvironment.XMLNSC.FILETEMP = InputLocalEnvironment.XMLNSC.FILETEMP;
	
		PROPAGATE TO TERMINAL 3;
		
		--0309
--		SET Environment.InputRoot.BLOB =InputRoot.BLOB;
--		SET Environment.FinleName =InputLocalEnvironment.File.Name;
--		--SET OutputRoot  = Environment.InputRoot;
--		PROPAGATE TO TERMINAL 4;
		--0309 Fin
		
		RETURN FALSE;

	END;

CREATE PROCEDURE crearTablaAfiliacionYReporteTemporal (
   												IN P_ID_TRANSACCION CHARACTER)		
LANGUAGE DATABASE
EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_CREAR_TEMPORALES";	


END MODULE;



CREATE COMPUTE MODULE MF_ESB_BTH_RECEPARCHIVO_PGP_ControlarFinArchivo
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	
		--((1)) Envio de mensajes para el control de la secuencia
		DECLARE campo NAME (getEST_ACTIVO() || SUBSTRING(InputLocalEnvironment.File.Name FROM 1 FOR 10));
		DECLARE refParam REFERENCE TO cacheProcesoActTarPgp.campo.Parametros;		
		
		SET OutputRoot.MQMD.Priority					= 5; --Prioridad con la que seran atendidos cuando el semaforo esta en verde		
		SET OutputRoot.MQMD.CorrelId					= getMsgIdValor(refParam.General.IDENTIFICADOR,TRUE);
		
		DECLARE PROCESAR_VAR CHARACTER;
		--0309 --Para control de secuencia
		IF InputLocalEnvironment.File.Record = 0 THEN
				SET PROCESAR_VAR = 	getSI();
		ELSEIF InputLocalEnvironment.File.Record > 0 THEN
				SET PROCESAR_VAR = getNO();
		END IF;
		--0309 Fin
			 				    
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.TOTALREGISTROS = InputLocalEnvironment.File.Record; --cantidad total del archivo
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.IDTRANSACCION	= refParam.Batch.msgIdTransaccion;
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.FECHAPROCESO 	= refParam.Batch.fechaProceso;
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.COLAGETRECEP	= obtenerColaRecepArchivo(refParam.General.IDENTIFICADOR);
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.HORARIO	 	= refParam.Batch.horario;
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.COLAHORARIO 	= refParam.Batch.colaHorario;
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.CANREGTRANS	= refParam.Batch.cantRegistrosTransaccion;
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.CANGRUPOS		= cacheProcesoActTarPgp.campo.grupo;
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.QMPROCESO		= QueueManagerName;								
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.PROCESAR 		= PROCESAR_VAR;--getSI();	
		SET OutputRoot.XMLNSC.MENSAJE.Parametros			= cacheProcesoActTarPgp.campo.Parametros; --Se pone los parametros aqui para que no de problemas en el mqget del controlador de secuencia

		PROPAGATE TO TERMINAL 1;
		
--		CALL crearTablaAfiliacionYReporteTemporal(CAST(refParam.Batch.idTransaccion AS CHARACTER)); 
									
		--((2)) Envio del grupo de los ultimos registros del archivo

		SET OutputRoot.MQMD.CorrelId  	= refParam.Batch.msgIdTransaccion;		
	
		SET OutputRoot.MQRFH2.usr = refParam;  
		SET OutputRoot.XMLNSC.MENSAJE.IDTRANSACCION	= refParam.Batch.msgIdTransaccion;
		SET OutputRoot.XMLNSC.MENSAJE.IDGRUPO		= getMsgIdValor(campo || CAST(cacheProcesoActTarPgp.campo.grupo AS CHARACTER),FALSE);
		SET OutputRoot.XMLNSC.MENSAJE.REGISTROSGRUPO= cacheProcesoActTarPgp.campo.cantidad;		
		SET OutputRoot.XMLNSC.MENSAJE.FECHAPROCESO 	= refParam.Batch.fechaProceso;

--0809
		--TODO :::inicio
		DELETE LASTCHILD OF cacheProcesoActTar.campo.Registros;
		SET OutputRoot.XMLNSC.MENSAJE.REGISTROS =cacheProcesoActTar.campo.Registros;  
		--TODO :::fin 
		
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaRecepArchivo(Environment.MQRFH2.usr.Parametros.General.IDENTIFICADOR);--refParam.General.IDENTIFICADOR);

--0809
--TODO :::inicio
		SET cacheProcesoActTar.campo.Registros = NULL;
		--TODO :::fin
		
		PROPAGATE TO TERMINAL 2 ;
	 
		--((3)) Registro de Log del Proceso de fin de archivo

		CALL armarMensajeLogProceso(OutputRoot,
									--CAST(refParam.Batch.idProceso AS CHARACTER),
									CAST(CAST(getID_PROCESO_2() AS INTEGER) AS CHARACTER), --0309 
									CAST(refParam.Batch.idTransaccion AS CHARACTER),    
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se termino de la lectura del archivo: ' || InputLocalEnvironment.File.Name);--refParam.Batch.nombreArchivo); --0309

		PROPAGATE TO TERMINAL 3 ;

		--((4)) Registro de Log del Proceso si es que ocurrio algun error en la carga y se genero el archivo con errores
		
		IF (refParam.error IS TRUE) THEN
--			CALL armarMensajeLogProceso(OutputRoot,
--									CAST(refParam.Batch.idProceso AS CHARACTER), 
--									CAST(refParam.Batch.idTransaccion AS CHARACTER),    
--									getTIP_LOG_ERROR(),
--									MessageFlowLabel,
--									'Se genero el archivo ' ||  InputLocalEnvironment.File.Name || getSUFIJO_ARCHIVO_ERRORES() || ' con ' || CAST(refParam.registrosErrorDfdl AS CHARACTER) || ' registros que tuvieron error en la carga') ;
--
--			PROPAGATE TO TERMINAL 3 ;--0309
			
			--((5))	 Se cierra el archivo de errores
								
			SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(refParam.Servicio.PATHFILERROR,refParam.ESB.PATHFILERROR);
			SET OutputLocalEnvironment.Destination.File.Name 		= InputLocalEnvironment.File.Name || getSUFIJO_ARCHIVO_ERRORES() || '.log';
												
			PROPAGATE TO TERMINAL 4 ;
		
		END IF;
		 
		SET cacheProcesoActTarPgp.campo =NULL; --comentado 0809
		
		RETURN FALSE;
	END;

--CREATE PROCEDURE crearTablaAfiliacionYReporteTemporal (
--   												IN P_ID_TRANSACCION CHARACTER)		
--LANGUAGE DATABASE
--EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_CREAR_TEMPORALES";	

END MODULE;



CREATE COMPUTE MODULE MF_ESB_BTH_RECEPARCHIVO_PGP_ControlarErrorRecepcion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--((1)) Controlar el error
		DECLARE campo NAME (getEST_ACTIVO() || SUBSTRING(InputLocalEnvironment.File.Name FROM 1 FOR 10));
		DECLARE refParam REFERENCE TO cacheProcesoActTarPgp.campo.Parametros;		
		
		SET refParam.error =  TRUE;
		SET refParam.registrosErrorDfdl =  COALESCE(refParam.registrosErrorDfdl,0) + 1;

		SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(refParam.Servicio.PATHFILERROR,refParam.ESB.PATHFILERROR);
		SET OutputLocalEnvironment.Destination.File.Name 		= InputLocalEnvironment.File.Name || getSUFIJO_ARCHIVO_ERRORES() || '.log';

		SET OutputRoot.BLOB.BLOB = InputBody.BLOB;
		
		PROPAGATE TO TERMINAL 1 ;
		
		RETURN FALSE;
		
	END;

END MODULE;

CREATE COMPUTE MODULE MF_ESB_BTH_RECEPARCHIVO_PGP_EnvirarArchivo
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE blnSleep BOOLEAN;
		SET blnSleep = SLEEP(2000);
		--((2)) copiar el BLOB del archivo		 
	
 		DECLARE cacheFileTemp REFERENCE TO cacheFileTemp;
 		
		SET OutputLocalEnvironment.Destination.File.Directory 	= '/app/visa/esb/batch/ftp/tarjetas/';
		SET OutputLocalEnvironment.Destination.File.Name 		= Environment.File.Name || 'cpy'; --0309 FileName
		--SET OutputLocalEnvironment.Destination.File.Name 		= Environment.FinleName || 'cpy';
		--SET OutputLocalEnvironment.Destination.File.Name 		= 'RPTA161002.pgp' || 'cpy';
		--SET OutputRoot.XMLNSC.FILETEMP  = InputRoot.BLOB;
		SET OutputRoot.BLOB = InputLocalEnvironment.XMLNSC.FILETEMP.BLOB;
				
		RETURN TRUE;
	END;


END MODULE;

CREATE COMPUTE MODULE MF_ESB_BTH_RECEPARCHIVO_PGP_Compute
CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		 		 	
		--((1)) Registro del proceso
 
--		CREATE FIELD cacheProcesoActTarPgp.campo.Parametros; 
--		DECLARE campo NAME (getEST_ACTIVO() || SUBSTRING(InputLocalEnvironment.File.Name FROM 1 FOR 10));--0809
--2411 		DECLARE refParam REFERENCE TO cacheProcesoActTarPgp.campo.Parametros;
 		
		DECLARE intIdTransaccion INTEGER; 	 
		/*CALL insertarProcesoActualizacionTarjetasBD(getID_PROCESO_2(),
														NULL,
														NULL,
														CURRENT_TIMESTAMP,
														Environment.File.Name,
														getEST_0_PROCESO(),
														CURRENT_TIMESTAMP,
														intIdTransaccion);*/
--0809
		--((1)) Guardado en memoria
		  
		ROUTING : BEGIN ATOMIC 

--			SET refParam.Servicio 	= InputBody.MENSAJE.PARAMETROS;
--			SET refParam.General	= InputBody.MENSAJE.SERVICIO;
--			SET refParam.ESB 		= InputBody.MENSAJE.PARAMETROSESB; 
--			
--			--((2)) Guardado de parametros del proceso batch 
--			SET refParam.Batch.idProceso 			= CAST(getID_PROCESO_2() AS INTEGER);		
-- 			SET refParam.Batch.cantNodos			= COALESCE(refParam.Servicio.CANTINST, refParam.ESB.CANTINST);
--			SET refParam.Batch.horaInicioProceso	= obtenerFechaHoraActualMasDias(2,1);
--	   		SET refParam.Batch.fechaInicioProceso	= obtenerFechaActual(4);						   
--			SET refParam.Batch.fechaProceso			= obtenerTimestampSinHora(CURRENT_DATE);
--			SET refParam.Batch.fechaNombreArchivo  	= SUBSTRING(Environment.File.Name FROM POSITION( '.' IN Environment.File.Name) - 6 FOR 6);-- Formato(yyMMdd)
--			SET refParam.Batch.nombreArchivo		= Environment.File.Name;			
--			SET refParam.Batch.idTransaccion		= intIdTransaccion;
--			SET refParam.Batch.msgIdTransaccion		= getMsgId(); --identificador unico del procesamiento de un archivo
--			
--			-- ((3)) Se obtiene el horario de proceso
--			
--			DECLARE chrColaHorario, chrNroHorario CHARACTER '';
--			CALL calcularProcesoPorHorario(refParam.General.IDENTIFICADOR, 
--													refParam.Servicio.INTVHORAPRC1,
--													refParam.Servicio.INTVHORAPRC2,
--													chrColaHorario, chrNroHorario);
--	
--			DECLARE chrT1 CHARACTER refParam.Servicio.CANREGTRANS1;
--			DECLARE chrT2 CHARACTER refParam.Servicio.CANREGTRANS2;
--			IF (chrNroHorario = '1') THEN
--				SET refParam.Batch.cantRegistrosTransaccion =  chrT1;
--			ELSEIF (chrNroHorario = '2') THEN
--				SET refParam.Batch.cantRegistrosTransaccion =  chrT2;
--			END IF;
--			 
--			SET refParam.Batch.horario	 	= chrNroHorario;
--			SET refParam.Batch.colaHorario 	= chrColaHorario;		

		
		END ROUTING ;
		  
		--((2)) Registro de Log del Proceso

		/*CALL armarMensajeLogProceso(OutputRoot,
									CAST(refParam.Batch.idProceso AS CHARACTER), 
									CAST(refParam.Batch.idTransaccion AS CHARACTER),   
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se inicio la lectura del archivo: ' || refParam.Batch.nombreArchivo);

		PROPAGATE TO TERMINAL 1;	*/--0809			
		
--		--((2)) Envio de alertas al inicio del proceso
--		
--		IF (COALESCE(refParam.Servicio.NOTIFICA,getNO())= getSI()) THEN
--			CALL prepararMensajeCorreoAlerta(OutputRoot,getTIPO_ALERTA_1(),refParam,NULL,NULL);
--			PROPAGATE TO TERMINAL 2;
--		END IF;

		--((3)) Envio de mensaje con los Parametros para el control de alertas 
		
		SET OutputRoot.XMLNSC 		= NULL;
		SET OutputRoot.MQMD.Format 					= 'MQHRF2  '; 
--2411		SET OutputRoot.MQRFH2.usr.Parametros = cacheProcesoActTar.campo.Parametros;
		PROPAGATE TO TERMINAL 3;

		RETURN FALSE;

	END;
END MODULE;

