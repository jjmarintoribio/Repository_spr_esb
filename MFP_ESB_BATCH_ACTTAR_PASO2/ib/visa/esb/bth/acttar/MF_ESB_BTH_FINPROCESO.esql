
BROKER SCHEMA ib.visa.esb.bth.acttar
 PATH ib.visa.esb.bth; 

CREATE COMPUTE MODULE MF_ESB_BTH_FINPROCESO_EjecutarFinalizacionCarga
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN 
		
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		--25/11 CambioLogicaOptimizado INICIO

		CALL insertarTarjetaAfiliacionTemporal(InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion);
		--1.0 Actualizar afilaciones que no sean codigo 05,07, 08
		CALL actualizarAfiliaciones(InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion,getID_ESB_VISA(),BrokerName);
				
		--1.1 Desafiliacion de afiliaciones con codigo 05
		--CALL desafiliarPaso1(InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion,getID_ESB_VISA(),BrokerName);
		--CALL desafiliarPaso2(InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion,getID_ESB_VISA(),BrokerName);
		--CALL desafiliarPaso3(InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion,getID_ESB_VISA(),BrokerName);
		
		--1.2 Actualizacion de cargos de afiliaciones con codigo 07 y 08
		--CALL actualizarCargosANoEnviado(InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion,getID_ESB_VISA(),BrokerName,
		--								obtenerTimestampSinHora(obtenerDateConOpcionFormato(Environment.MQRFH2.usr.Parametros.Batch.fechaNombreArchivo,3))
		--								);
		--1.3 Inserción en Tabla reporte Actualización de Tarjetas
		CALL insertarActualizacionTarjetaTemporalAReporte(InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion);
	
		--1.4 Envio de correo a TH
		/*CALL obtenerTHNotificacionDesafiliacion(InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion,Environment.THDesafiliados[]); 
		DECLARE refDesafiliado REFERENCE TO Environment.THDesafiliados;	
		WHILE LASTMOVE(refDesafiliado) DO
			IF (refDesafiliado.EMAIL_TARJETAHABIENTE IS NOT NULL) THEN

					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
					SET OutputRoot.XMLNSC.Email.Header.From = Environment.MQRFH2.usr.Parametros.ESB.REMITENTE;
					SET OutputRoot.XMLNSC.Email.Header.To = refDesafiliado.EMAIL_TARJETAHABIENTE;
					SET OutputRoot.XMLNSC.Email.Header.Subject = 'Visanet - Desafiliacion';
					SET OutputRoot.XMLNSC.Email.Body = '<p>Estimado Sr(a): </br> Se ha desafiliado al pago recurrente de Visanet.</b> Atentamente, Visanet Per&uacute.</p>';
					
					PROPAGATE TO TERMINAL 3;
			END IF;
			MOVE refDesafiliado NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;		
		--1.5 Envio de correo a comercios
		CALL obtenerComercioNotificacionDesafiliacion(InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion,Environment.ComercioDesafiliados[]); 
		DECLARE refComercio REFERENCE TO Environment.ComercioDesafiliados;	
		WHILE LASTMOVE(refComercio) DO
			
			CALL obtenerDetalleComercioNotificacionDesafiliacion(InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion,refComercio.ID_COMERCIO,Environment.ComercioDetalle[]);
			DECLARE blnExiste BOOLEAN EXISTS (Environment.ComercioDetalle[]);
			IF (blnExiste) THEN
				DECLARE refComercioDetalle REFERENCE TO Environment.ComercioDetalle;
						CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
						SET OutputRoot.XMLNSC.Email.Header.From = Environment.MQRFH2.usr.Parametros.ESB.REMITENTE;
						SET OutputRoot.XMLNSC.Email.Header.To = refDesafiliado.EMAIL_CONTACTO_ADMINISTRATIVO;
						SET OutputRoot.XMLNSC.Email.Header.Subject = 'Visanet - Desafiliacion';
						SET OutputRoot.XMLNSC.Email.Body = '<p>Estimado Sr(a): </br> Se ha desafiliado al pago recurrente de Visanet los siguientes beneficiarios:</b>'||
															refDesafiliado.BENEFICIARIOS ||
															' Atentamente, Visanet Per&uacute.</p>';
				PROPAGATE TO TERMINAL 3;
			END IF;
			MOVE refComercio NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;		
		*/
		--25/11 CambioLogicaOptimizado FIN
		
					
		--((1)) hacer que cambie el estado de un proceso	
		CALL armarMensajeLogProceso(OutputRoot,
									InputRoot.MQRFH2.usr.Parametros.Batch.idProceso, 
									InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion,   
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se termino de actualizar en BD el archivo de Tarjetas ' || InputRoot.MQRFH2.usr.Parametros.Batch.nombreArchivo);
		
		PROPAGATE TO TERMINAL 1;
  
		--((2)) se trunca la tabla de pagos temporales 
		--CALL truncarTabla(getESQUEMA_BD_ESB(),'ACTUALIZACION_TARJETA_TEMPORAL');			
		--25/11 CambioLogicaOptimizado INICIO
		--CALL truncarTabla(getESQUEMA_BD_ESB(),'ACTUALIZACION_TARJETA_TEMPORAL_AFILIACION');
		--CALL dropTablasTemporales(InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion);
		--25/11 CambioLogicaOptimizado FIN
		
		CALL armarMensajeLogProceso(OutputRoot,
									InputRoot.MQRFH2.usr.Parametros.Batch.idProceso, 
									InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion,   
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se trunco la tabla de actualizacion de tarjetas temporal');		
		
		PROPAGATE TO TERMINAL 1;
		--((3)) Se cambia de estado la instancia del proceso 
 
		CALL actualizarProcesoActualizacionTarjetasBD(CAST(InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion AS INTEGER),
														CURRENT_TIMESTAMP,
														NULL,
														CURRENT_TIMESTAMP,
														getEST_1_PROCESO()
														) ;
		
		--((3)) se cambia el semaforo a verde
	--	SET OutputRoot.XMLNSC.MENSAJE.PROCESANDO = getNO();
		
	--	PROPAGATE TO TERMINAL 2;			

		--((4)) Envio de alertas al inicio del proceso}
		SET Environment.Parametros = InputRoot.MQRFH2.usr.Parametros;		
		SET Environment.Parametros.Batch.horaFinProceso = obtenerFechaHoraActual(2);
		
		IF ( COALESCE(InputRoot.MQRFH2.usr.Parametros.Servicio.NOTIFICA,getNO())= getSI()) THEN  
			CALL prepararMensajeCorreoAlerta(OutputRoot,getTIPO_ALERTA_2(),Environment.Parametros,NULL,NULL);
			PROPAGATE TO TERMINAL 3;
		END IF;	
		
		RETURN FALSE;
	END;

CREATE PROCEDURE insertarTarjetaAfiliacionTemporal(IN I_ID_PROCESO_ACTUALIZACION_TARJETA CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_INSERTAR_TEMPORAL_2";  
 	
CREATE PROCEDURE actualizarAfiliaciones(IN I_ID_TRANSACCION CHARACTER,
										IN I_COD_USUARIO_MODIFICACION CHARACTER,
  										IN I_IP_MODIFICACION CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_ACTUALIZAR_AFILIACION";

CREATE PROCEDURE desafiliarPaso1(IN I_ID_TRANSACCION CHARACTER,
										IN I_COD_USUARIO_MODIFICACION CHARACTER,
  										IN I_IP_MODIFICACION CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_DESAFILIAR_NEW_1";

CREATE PROCEDURE desafiliarPaso2(IN I_ID_TRANSACCION CHARACTER,
										IN I_COD_USUARIO_MODIFICACION CHARACTER,
  										IN I_IP_MODIFICACION CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_DESAFILIAR_NEW_2";

CREATE PROCEDURE desafiliarPaso3(IN I_ID_TRANSACCION CHARACTER,
										IN I_COD_USUARIO_MODIFICACION CHARACTER,
  										IN I_IP_MODIFICACION CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_DESAFILIAR_NEW_3";

CREATE PROCEDURE actualizarCargosANoEnviado(IN I_ID_TRANSACCION CHARACTER,
										IN I_COD_USUARIO_MODIFICACION CHARACTER,
  										IN I_IP_MODIFICACION CHARACTER,
  										IN I_FEC_ACTUALIZACION TIMESTAMP)
LANGUAGE DATABASE
EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_CARGOS_NEW";

CREATE PROCEDURE obtenerTHNotificacionDesafiliacion(IN I_ID_TRANSACCION CHARACTER)		
LANGUAGE DATABASE
DYNAMIC RESULT SETS 1
EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_DESAFILIAR_CORREO_TH";
 
CREATE PROCEDURE obtenerComercioNotificacionDesafiliacion(IN I_ID_TRANSACCION CHARACTER)		
LANGUAGE DATABASE
DYNAMIC RESULT SETS 1
EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_DESAFILIAR_BUSCAR_COMERCIO";

CREATE PROCEDURE obtenerDetalleComercioNotificacionDesafiliacion(IN I_ID_TRANSACCION CHARACTER,IN I_ID_COMERCIO INT)		
LANGUAGE DATABASE
DYNAMIC RESULT SETS 1
EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_DESAFILIAR_CORREO_COMERCIO";

CREATE PROCEDURE insertarActualizacionTarjetaTemporalAReporte(IN I_ID_TRANSACCION CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_INSERTAR_NEW";  

CREATE PROCEDURE dropTablasTemporales(IN I_ID_TRANSACCION CHARACTER)
LANGUAGE DATABASE
EXTERNAL NAME "SPRESB.SP_ACTUALIZACION_TARJETA_DROP_TEMPORALES";  

END MODULE;



CREATE COMPUTE MODULE MF_ESB_BTH_FINPROCESO_ControlarError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN 
		
		--((1)) se cambia el semaforo a verde
		SET OutputRoot.XMLNSC.MENSAJE.PROCESANDO = getNO();

		RETURN TRUE;
	END;

END MODULE;
