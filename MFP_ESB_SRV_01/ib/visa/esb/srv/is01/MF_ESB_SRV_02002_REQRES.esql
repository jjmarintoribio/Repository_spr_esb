/*
 *
 * Nombre		: MF_ESB_SRV_02001_REQRES.esql
 * Proposito	: Flujo especifico para el servicio 02001
 * Fecha		: 2014-03-28
 * Autores		: Ruben Mejia - Synopsis
 * Version		: 1.0
 * 
 *--------------------------------------------------------------------
 */ 
BROKER SCHEMA ib.visa.esb.srv.is01
PATH ib.visa.esb.core; 


CREATE COMPUTE MODULE MF_ESB_SRV_02002_REQRES_AdecuarMensaje
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		--((1)) Se prepara el formato del mensaje de salida hacia la app proveedora
		CALL setearPropiedadesMensaje(OutputRoot,'','','');
		
		--((2)) Se copian las cabeceras
		SET OutputRoot.MQMD 		= InputRoot.MQMD;
		SET OutputRoot.MQRFH2.usr 	= InputRoot.MQRFH2.usr;
	
		--((3)) Adecuacion de Cabecera MQMD
		CALL setearPropiedadesMQMD(OutputRoot.MQMD, InputRoot.MQMD,InputRoot.MQRFH2.usr.Parametros.Servicio);


		--((3.1)) Parseo del mensaje de entrada
		CREATE LASTCHILD OF Environment DOMAIN 'XMLNSC';
		--DECLARE parseOptions INTEGER BITOR(ValidateContent, ValidateValue, ValidateLocalError);
		CREATE LASTCHILD OF Environment.XMLNSC PARSE (InputBody.BLOB
									                 --OPTIONS parseOptions
									                 FORMAT 'XMLNSC');	


		--((3.2)) Validaciones de negocio
 		DECLARE refIn REFERENCE TO Environment.XMLNSC.XMLNSC.INTEGREQ.DETALLE.DATOS.Comercio;
		 
		--((4)) Se arma el mensaje soap con la estructura que CavaliSerive espera
		DECLARE nsSrv NAMESPACE getNSSPRWEB_SCHEMA();
		DECLARE nsSoap NAMESPACE getNS_SOAP();  
		DECLARE namMetodo NAME 'RegistrarComercioRequest'; 
		  
		CALL prepararEnvelopeSoapReqSPRWEBServices(OutputRoot,nsSoap,nsSrv,namMetodo);
				
		--inicio de mapeo
		CREATE FIELD OutputRoot.XMLNS.nsSoap:Envelope.nsSoap:Body.nsSrv:namMetodo.nsSrv:Detalle.nsSrv:Comercio;
		DECLARE refOut REFERENCE TO OutputRoot.XMLNS.nsSoap:Envelope.nsSoap:Body.nsSrv:namMetodo.nsSrv:Detalle.nsSrv:Comercio;
		
		SET refOut.nsSrv:Codigo										 =	refIn.Codigo;
		SET refOut.nsSrv:NombreComercial							 =	refIn.NombreComercial;
		SET refOut.nsSrv:Ruc										 =	refIn.Ruc;
		SET refOut.nsSrv:Anexo										 =	refIn.Anexo;
		SET refOut.nsSrv:ContactoAdministrativo.nsSrv:NombreCompleto =	refIn.ContactoAdministrativo.NombreCompleto;
		SET refOut.nsSrv:ContactoAdministrativo.nsSrv:Email			 =	refIn.ContactoAdministrativo.Email;				
		SET refOut.nsSrv:ContactoNotificacion.nsSrv:NombreCompleto   =	refIn.ContactoNotificacion.NombreCompleto;
		SET refOut.nsSrv:ContactoNotificacion.nsSrv:Email			 =	refIn.ContactoNotificacion.Email;
		SET refOut.nsSrv:Moneda									 	 =	refIn.Moneda;
				
		--Guardado del mensaje de salida formateado para registrarlo en auditoria
		CREATE LASTCHILD OF Environment DOMAIN 'XMLNS';
		SET Environment.XMLNS = OutputRoot.XMLNS;		
				
		--((5)) Se indica la cola de salida del flujo generico 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaEntradaFlujoSalida(InputRoot.MQRFH2.usr);		

		--((6)) Se registra Auditoria
		--SET OutputRoot.MQRFH2.usr.Parametros.Auditoria.indTransaccion = COALESCE(refIn.participantNegotiatorCode,'');
				
		PROPAGATE TO TERMINAL 1;

		CALL armarAuditoriaEventoFormateo(OutputRoot,
							InputRoot.MQMD.MsgId,
							InputRoot.MQRFH2.usr,
							Environment.XMLNS,
							NULL,
							COALESCE(refIn.Codigo,''),
							'',
							'',
							'',
							'',
							'',
							'',
							'',
							'',
							'');

		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = getCOLA_ENTRADA_FLUJO_AUDITORIA();
		
		PROPAGATE TO TERMINAL 2;

		RETURN FALSE;
	END;

END MODULE;

CREATE COMPUTE MODULE MF_ESB_SRV_02002_REQRES_PrepararRespuesta
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
--((0)) Validacion si el mensaje tuvo un problema al enviarse al destino
		CALL validarRespuestaError(InputRoot);  
		
		--((1)) Se prepara el formato del mensaje de salida hacia la app proveedora
		CALL setearPropiedadesMensaje(OutputRoot,'MS_ESB_CORE_INPUTHTTP','MENSAJERES','');
		
		--((2)) Se copian las cabeceras
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.MQRFH2.usr.Parametros = InputRoot.MQRFH2.usr.Parametros;
		
		--((3)) Adecuacion de Cabecera MQMD
		CALL setearPropiedadesMQMD(OutputRoot.MQMD, InputRoot.MQMD,InputRoot.MQRFH2.usr.Parametros.Servicio);	
				
		--((4)) Preparacion del mensaje Soap de respuesta generica
		DECLARE nsSrv NAMESPACE InputRoot.MQRFH2.usr.Parametros.Protocolo.Datos.Namespace;
		DECLARE nsSoap NAMESPACE getNS_SOAP();
		DECLARE namMetodo NAME 'RegistrarComercioRequest'; 
		 
		DECLARE refInput REFERENCE TO InputRoot.XMLNSC.nsSoap:Envelope.nsSoap:Body.nsSrv:namMetodo; 
  
		--((4.1)) Validacion de la cabecera de respuesta del servicio proveedor
		CALL validarRespuestaSPRWeb(refInput.nsSrv:Cabecera.nsSrv:Codigo,
									refInput.nsSrv:Cabecera.nsSrv:Descripcion,
									OutputRoot, 
									InputRoot,
									nsSoap,
									nsSrv);	 
			
		--Guardado del mensaje de salida formateado para registrarlo en auditoria
		CREATE LASTCHILD OF Environment DOMAIN 'XMLNS';
		SET Environment.XMLNS = OutputRoot.XMLNS;
	
        --((6))Se asigna la cola generica de respuesta del protocolo
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaEntradaProtocoloRespuesta(InputRoot.MQRFH2.usr);
		PROPAGATE TO TERMINAL 1;
		
		--((7)) Se registra Auditoria
		
		CALL armarAuditoriaEventoRespuestaConsumidor(OutputRoot,
							InputRoot.MQMD.MsgId,
							InputRoot.MQRFH2.usr,
							Environment.XMLNS,
							NULL); 
 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = getCOLA_ENTRADA_FLUJO_AUDITORIA();
		PROPAGATE TO TERMINAL 2;

		RETURN FALSE;	
	END;
END MODULE;

