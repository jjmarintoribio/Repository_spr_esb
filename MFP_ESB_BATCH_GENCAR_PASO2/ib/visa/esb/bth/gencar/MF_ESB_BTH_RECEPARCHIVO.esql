BROKER SCHEMA ib.visa.esb.bth.gencar
PATH ib.visa.esb.bth;

DECLARE cacheProcesoGenCar SHARED ROW;

CREATE COMPUTE MODULE MF_ESB_BTH_RECEPARCHIVO_ValidarRegistro
	CREATE FUNCTION Main() RETURNS BOOLEAN 
	BEGIN 

		DECLARE campo NAME (getEST_ACTIVO() || RIGHT(InputLocalEnvironment.File.TimeStamp,16));
		DECLARE refParam REFERENCE TO cacheProcesoGenCar.campo.Parametros;
		DECLARE nroLote CHARACTER '';		
		
		
	

		--((1)) solo con el primer registro se va a obtener parametros

		IF (InputLocalEnvironment.File.Record = 1) THEN 
			
			SET OutputRoot.MQMD.MsgId	= getMsgId();
			SET OutputRoot.MQMD.CorrelId=OutputRoot.MQMD.MsgId; 
		 
			CREATE NEXTSIBLING OF OutputRoot.MQMD DOMAIN 'XMLNSC';		 
			SET OutputRoot.XMLNSC.MENSAJE.IDPROCESO    = getID_PROCESO_4();
		 
			SET cacheProcesoGenCar.campo.cantidad 	= 0;
			SET cacheProcesoGenCar.campo.grupo 		= 1;		
			
		 	SET Environment.File.Name 		  	 = InputLocalEnvironment.File.Name;
		  	SET Environment.File.TimeStamp	  	 = RIGHT(InputLocalEnvironment.File.TimeStamp,16);
		  	SET Environment.File.CodResultado 	 = TRIM(CAST(SUBSTRING(InputBody.BLOB FROM 78 FOR 2) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId));
		  	SET Environment.File.MsjResultado 	 = TRIM(CAST(SUBSTRING(InputBody.BLOB FROM 96 FOR 22) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId));
		  	
			PROPAGATE TO TERMINAL 1;		
			--TODO :::inicio
			CREATE FIELD cacheProcesoGenCar.campo.Registros.REGISTRO;
			--TODO :::fin		
			 		 		   
		ELSE
 
 			SET Environment.tipoRegistro = CAST(SUBSTRING(InputBody.BLOB FROM 1 FOR 1) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
 			
 			--TODO Validar que funcione con errorCabeceraArchivo
			IF ( (Environment.tipoRegistro = 'D' OR Environment.tipoRegistro = 'H')) THEN -- solo detalles y cabeceras
				
				--((2))Se envia un mensaje por cada grupo de mensajes
				
				IF (cacheProcesoGenCar.campo.cantidad = refParam.Batch.cantRegistrosTransaccion) THEN
														 
					SET OutputRoot.MQMD.CorrelId  		= refParam.Batch.msgIdTransaccion; -- para obtener todos los grupos con el get cuando se termine de leer el file
				  
					SET OutputRoot.MQRFH2.usr = refParam;   
					SET OutputRoot.XMLNSC.MENSAJE.IDTRANSACCION	= refParam.Batch.msgIdTransaccion;
					SET OutputRoot.XMLNSC.MENSAJE.IDGRUPO		= getMsgIdValor((getEST_ACTIVO() || RIGHT(InputLocalEnvironment.File.TimeStamp,16)) || CAST(cacheProcesoGenCar.campo.grupo AS CHARACTER),FALSE);
					SET OutputRoot.XMLNSC.MENSAJE.REGISTROSGRUPO= cacheProcesoGenCar.campo.cantidad;					
					SET OutputRoot.XMLNSC.MENSAJE.FECHAPROCESO 	= refParam.Batch.fechaProceso;
					--TODO :::inicio
					DELETE LASTCHILD OF cacheProcesoGenCar.campo.Registros;
								
					IF cacheProcesoGenCar.flagFinArchivo IS NULL THEN						
						SET OutputRoot.XMLNSC.MENSAJE.FINARCHIVO=TRUE;
						ROUTING : BEGIN ATOMIC
						SET cacheProcesoGenCar.flagFinArchivo = TRUE;
						END ROUTING;
					END IF;
					
					SET OutputRoot.XMLNSC.MENSAJE.REGISTROS =cacheProcesoGenCar.campo.Registros;
					IF COALESCE(refParam.Batch.errorCabeceraArchivo,'') <> '' THEN
						SET OutputRoot.XMLNSC.MENSAJE.ERRROARCHIVO=TRUE;	
					END IF;  
	
					ROUTING : BEGIN ATOMIC 
						DELETE FIELD cacheProcesoGenCar.campo.Registros;	
						CREATE FIELD cacheProcesoGenCar.campo.Registros.REGISTRO;															
					END ROUTING ;
					--TODO :::fin  	
	
					SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaRecepArchivo(refParam.General.IDENTIFICADOR);			
				
					PROPAGATE TO TERMINAL 3;  
	
					SET cacheProcesoGenCar.campo.cantidad 	= 0;
					SET cacheProcesoGenCar.campo.grupo 		= cacheProcesoGenCar.campo.grupo + 1;				
					
				END IF;   
				
				--((3)) Se envia el detalle de cada registro a la cola temporal de recepcion 
				   
				SET cacheProcesoGenCar.campo.cantidad 		= cacheProcesoGenCar.campo.cantidad + 1;  
				
				IF (Environment.tipoRegistro = 'D') THEN				
					SET Environment.MessageType = 'MSJ_CARGO_RES';
				ELSE
					SET Environment.MessageType = 'MSJ_LOTE_RES_INI';
				END IF;

				SET OutputRoot.Properties.MessageSet 	= 'MS_ESB_BATCH_GENCARGOS';
				SET OutputRoot.Properties.MessageType 	= Environment.MessageType;
				SET OutputRoot.Properties.MessageFormat	= 'XML';
				 
				SET OutputRoot.MQMD.CorrelId  = getMsgIdValor((getEST_ACTIVO() || RIGHT(InputLocalEnvironment.File.TimeStamp,16)) || CAST(cacheProcesoGenCar.campo.grupo AS CHARACTER),FALSE);			
		
				--Se parsea el mensaje  		
				CREATE LASTCHILD OF Environment DOMAIN 'MRM';			
				DECLARE parseOptions INTEGER BITOR(ValidateContent, ValidateValue, ValidateLocalError);
				CREATE LASTCHILD OF Environment.MRM	PARSE ( InputBody.BLOB
									                        OPTIONS parseOptions
									                        SET 'MS_ESB_BATCH_GENCARGOS'
									                        TYPE Environment.MessageType
									                        FORMAT 'CWF');
									                        
				--TODO :::inicio									                        
				--SET OutputRoot.XMLNSC	= Environment.MRM.MRM;
				DECLARE refFila REFERENCE TO cacheProcesoGenCar.campo.Registros;
  				MOVE refFila LASTCHILD;  
				SET refFila = Environment.MRM.MRM.MENSAJE;
				IF (Environment.tipoRegistro = 'H') THEN
					
			    	SET cacheProcesoGenCar.campo.idLote = Environment.MRM.MRM.MENSAJE.NROLOTE;			    	
			    	
			    END IF;
			    
			    SET nroLote = cacheProcesoGenCar.campo.idLote;
			 
			    set refFila.NROLOTE = nroLote;
			    
 				CREATE LASTCHILD OF  cacheProcesoGenCar.campo.Registros NAME 'REGISTRO';
				--TODO :::fin					                        
									                        
									                        
				--SET OutputRoot.XMLNSC					= Environment.MRM.MRM;
									
			    
			     
			    --SET OutputRoot.XMLNSC.MENSAJE.NROLOTE 	= cacheProcesoGenCar.campo.idLote;
										
				--SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaRecepArchivoDetalle(refParam.General.IDENTIFICADOR); 
	 	 
				--PROPAGATE TO TERMINAL 2;
			END IF;
			
		END IF;
	
		
		RETURN FALSE;

		
	END;

END MODULE;


CREATE COMPUTE MODULE MF_ESB_BTH_RECEPARCHIVO_GrabarParametros
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
 
		--((0)) Registro del proceso
			DECLARE campo NAME (getEST_ACTIVO() || Environment.File.TimeStamp);
		CREATE FIELD cacheProcesoGenCar.campo.Parametros;		
			DECLARE refParam REFERENCE TO cacheProcesoGenCar.campo.Parametros;
			
		DECLARE intIdTransaccion INTEGER; 	 
		CALL insertarProcesoAutorizadorTransaccionBD(getID_PROCESO_4(),
														NULL,
														NULL,
														CURRENT_TIMESTAMP,
														Environment.File.Name,
														getEST_0_PROCESO(),
														CURRENT_TIMESTAMP,
														intIdTransaccion);
														
		--((0.1))Obtener Valor numerico de Parametros (Periodo de operaci√≥n)
		CALL obtenerParametro(getID_PARAMETRO_PERIODO_OPERACION(),Environment.resultSetParametros[]);
												
		--((1)) Guardado en memoria
		   
		ROUTING : BEGIN ATOMIC  
			
		
			
			 
			SET refParam.Servicio 	= InputBody.MENSAJE.PARAMETROS;
			SET refParam.General	= InputBody.MENSAJE.SERVICIO;
			SET refParam.ESB 		= InputBody.MENSAJE.PARAMETROSESB; 
			
			--((2)) Guardado de parametros del proceso batch 
			SET refParam.Batch.idProceso 			= CAST(getID_PROCESO_4() AS INTEGER);		
			SET refParam.Batch.cantNodos			= COALESCE(refParam.Servicio.CANTINST, refParam.ESB.CANTINST);
			SET refParam.Batch.horaInicioProceso	= obtenerFechaHoraActual(2);
	   		SET refParam.Batch.fechaInicioProceso	= obtenerFechaActual(4);						      
			SET refParam.Batch.fechaProceso			= obtenerTimestampSinHora(CURRENT_DATE);
			SET refParam.Batch.nombreArchivo		= Environment.File.Name;			
			SET refParam.Batch.idTransaccion		= intIdTransaccion;
			SET refParam.Batch.msgIdTransaccion		= getMsgId(); --identificador unico del procesamiento de un archivo
			SET refParam.Batch.errorCabeceraArchivo	= COALESCE(Environment.File.CodResultado,'.');
			SET refParam.Batch.HorasPeriodoOpe		= COALESCE(Environment.resultSetParametros[1].VAL_NUMERICO,49); --periodo de operacion
		
			-- ((3)) Se obtiene el horario de proceso
			
			DECLARE chrColaHorario, chrNroHorario CHARACTER '';
			CALL calcularProcesoPorHorario(refParam.General.IDENTIFICADOR, refParam.Servicio.INTVHORAPRC1,
																			  refParam.Servicio.INTVHORAPRC2,
																			  chrColaHorario, chrNroHorario);

			DECLARE chrT1 CHARACTER refParam.Servicio.CANREGTRANS1;
			DECLARE chrT2 CHARACTER refParam.Servicio.CANREGTRANS2;
			DECLARE chrT3 CHARACTER refParam.Servicio.CANREGTRANS3;
			IF (chrNroHorario = '1') THEN
				SET refParam.Batch.cantRegistrosTransaccion =  chrT1;
			ELSEIF (chrNroHorario = '2') THEN
				SET refParam.Batch.cantRegistrosTransaccion =  chrT2;
			END IF; 
			
			SET refParam.Batch.horario	 	= chrNroHorario;
			SET refParam.Batch.colaHorario 	= chrColaHorario;	

			SET Environment.refParam = refParam;
			SET Environment.refParam.otros  = Environment.resultSetParametros;
			
		END ROUTING ;
		
		--((4)) Registro de Log del Proceso

		CALL armarMensajeLogProceso(OutputRoot,
									CAST(refParam.Batch.idProceso AS CHARACTER), 
									CAST(refParam.Batch.idTransaccion AS CHARACTER),   
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se inicio la lectura del archivo: ' || refParam.Batch.nombreArchivo);

		PROPAGATE TO TERMINAL 1;
   
		--((5.1)) Envio de alertas al inicio del proceso
		
		IF (COALESCE(refParam.Servicio.NOTIFICA,getNO())= getSI()) THEN
			CALL prepararMensajeCorreoAlerta(OutputRoot,getTIPO_ALERTA_1(),refParam,NULL,NULL);
			PROPAGATE TO TERMINAL 2;
		END IF;

		--((5.2)) Envio de notificacion solo si el archivo es incorrecto
		IF (Environment.File.CodResultado <> '') THEN
			
			--Actualiza todos los cargos con estado EN_PROCESO a PENDIENTE
			CALL actualizarCargosProcesoAutorizadorError(obtenerTimestampSinHora(obtenerDateConFormato(SUBSTRING(refParam.Batch.nombreArchivo AFTER 'T' FOR 8))));
				
			--Se envia notificaci√≥n al Administrador Visanet
			CALL prepararMensajeCorreoAlerta(OutputRoot,getTIPO_ALERTA_5(),refParam,Environment.File.MsjResultado,NULL);
			PROPAGATE TO TERMINAL 2;
		END IF;
		
		--((6)) Envio de mensaje con los Parametros para el control de alertas 
		
		SET OutputRoot.XMLNSC 				 = NULL;
		SET OutputRoot.MQMD.Format 			 = 'MQHRF2  '; 
		SET OutputRoot.MQRFH2.usr.Parametros = cacheProcesoGenCar.campo.Parametros;
		PROPAGATE TO TERMINAL 3;

		RETURN FALSE;
		
	END;
	
	
END MODULE;


CREATE COMPUTE MODULE MF_ESB_BTH_RECEPARCHIVO_ControlarFinArchivo
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN  
		
		--((1)) Envio de mensajes para el control de la secuencia
		DECLARE campo NAME (getEST_ACTIVO() || RIGHT(InputLocalEnvironment.File.TimeStamp,16));
		DECLARE refParam REFERENCE TO cacheProcesoGenCar.campo.Parametros;
		
		--2406 IF STARTSWITH(InputLocalEnvironment.File.Name,'WEBFNRECUSUN') THEN
		--	SET refParam.flgArchivoAlignet = TRUE;
		--ELSE
		--	SET refParam.flgArchivoAlignet = FALSE;	
		--END IF;
		
		SET OutputRoot.MQMD.Priority					= 9; --Prioridad con la que seran atendidos cuando el semaforo esta en verde
		SET OutputRoot.MQMD.CorrelId					= getMsgIdValor(refParam.General.IDENTIFICADOR,TRUE);
		 				    
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.IDTRANSACCION	= refParam.Batch.msgIdTransaccion;
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.FECHAPROCESO 	= refParam.Batch.fechaProceso;
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.COLAGETRECEP	= obtenerColaRecepArchivo(refParam.General.IDENTIFICADOR);
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.HORARIO	 	= refParam.Batch.horario;
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.COLAHORARIO 	= refParam.Batch.colaHorario;
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.CANREGTRANS	= refParam.Batch.cantRegistrosTransaccion;
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.CANGRUPOS		= cacheProcesoGenCar.campo.grupo;
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.QMPROCESO		= QueueManagerName;			
		SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.PROCESAR 		= getSI();	
		SET OutputRoot.XMLNSC.MENSAJE.Parametros			= cacheProcesoGenCar.campo.Parametros; --Se pone los parametros aqui para que no de problemas en el mqget del controlador de secuencia
		
		PROPAGATE TO TERMINAL 1 ;

		--((2)) Envio del grupo de los ultimos registros del archivo

		SET OutputRoot.MQMD.CorrelId  	= refParam.Batch.msgIdTransaccion;		
	
		SET OutputRoot.MQRFH2.usr = refParam;  
		SET OutputRoot.XMLNSC.MENSAJE.IDTRANSACCION	= refParam.Batch.msgIdTransaccion;
		SET OutputRoot.XMLNSC.MENSAJE.IDGRUPO		= getMsgIdValor((getEST_ACTIVO() || RIGHT(InputLocalEnvironment.File.TimeStamp,16)) || CAST(cacheProcesoGenCar.campo.grupo AS CHARACTER),FALSE);
		SET OutputRoot.XMLNSC.MENSAJE.REGISTROSGRUPO= cacheProcesoGenCar.campo.cantidad;
		SET OutputRoot.XMLNSC.MENSAJE.FECHAPROCESO 	= refParam.Batch.fechaProceso;
		--TODO :::inicio
		DELETE LASTCHILD OF cacheProcesoGenCar.campo.Registros;
		SET OutputRoot.XMLNSC.MENSAJE.REGISTROS =cacheProcesoGenCar.campo.Registros;  
		IF COALESCE(refParam.Batch.errorCabeceraArchivo,'') <> '' THEN
						SET OutputRoot.XMLNSC.MENSAJE.ERRROARCHIVO=TRUE;	
		END IF;  
		
		--24/06 IF cacheProcesoGenCar.flagFinArchivo IS NULL THEN						
		--	SET OutputRoot.XMLNSC.MENSAJE.FINARCHIVO=TRUE;
		--	ROUTING : BEGIN ATOMIC
		--	SET cacheProcesoGenCar.flagFinArchivo = TRUE;
		--	END ROUTING;
		--24/06 END IF;
		
		--TODO :::fin 

		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaRecepArchivo(refParam.General.IDENTIFICADOR);
		
		--TODO :::inicio
		SET cacheProcesoGenCar.campo.Registros = NULL;
		--TODO :::fin
		
		--24/06
		SET OutputRoot.XMLNSC.MENSAJE.FINARCHIVO=TRUE;
		
		PROPAGATE TO TERMINAL 2 ;

		--((3)) Registro de Log del Proceso de fin de archivo

		CALL armarMensajeLogProceso(OutputRoot,
									CAST(refParam.Batch.idProceso AS CHARACTER), 
									CAST(refParam.Batch.idTransaccion AS CHARACTER),    
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se termino de la lectura del archivo: ' || refParam.Batch.nombreArchivo);

		PROPAGATE TO TERMINAL 3 ;

		--((4)) Registro de Log del Proceso si es que ocurrio algun error en la carga y se genero el archivo con errores
		
		IF (refParam.error IS TRUE) THEN
			CALL armarMensajeLogProceso(OutputRoot,
									CAST(refParam.Batch.idProceso AS CHARACTER), 
									CAST(refParam.Batch.idTransaccion AS CHARACTER),    
									getTIP_LOG_ERROR(),
									MessageFlowLabel,
									'Se genero el archivo ' ||  InputLocalEnvironment.File.Name || getSUFIJO_ARCHIVO_ERRORES() || ' con ' || CAST(refParam.registrosErrorDfdl AS CHARACTER) || ' registros que tuvieron error en la carga') ;

			PROPAGATE TO TERMINAL 3 ;
			
			--((5))	 Se cierra el archivo de errores
								
			SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(refParam.Servicio.PATHFILERROR,refParam.ESB.PATHFILERROR);
			SET OutputLocalEnvironment.Destination.File.Name 		= InputLocalEnvironment.File.Name || getSUFIJO_ARCHIVO_ERRORES();
												
			PROPAGATE TO TERMINAL 4 ;
		
		END IF;
		
		SET cacheProcesoGenCar.campo =NULL;
		
		RETURN FALSE;
		
	END;

END MODULE;
	
CREATE COMPUTE MODULE MF_ESB_BTH_RECEPARCHIVO_ControlErrorRecepcion
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	
		--((1)) Controlar el error
		DECLARE campo NAME (getEST_ACTIVO() || RIGHT(InputLocalEnvironment.File.TimeStamp,16));
		DECLARE refParam REFERENCE TO cacheProcesoGenCar.campo.Parametros;
		
		SET refParam.error =  TRUE;
		SET refParam.registrosErrorDfdl =  COALESCE(refParam.registrosErrorDfdl,0) + 1;

		SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(refParam.Servicio.PATHFILERROR,refParam.ESB.PATHFILERROR);
		SET OutputLocalEnvironment.Destination.File.Name 		= InputLocalEnvironment.File.Name || getSUFIJO_ARCHIVO_ERRORES();

		SET OutputRoot.BLOB.BLOB = InputBody.BLOB;
		
		PROPAGATE TO TERMINAL 1 ;
		
		RETURN FALSE;
		
	END;
	
END MODULE;