BROKER SCHEMA ib.visa.esb.bth.gencar
PATH ib.visa.esb.bth;

DECLARE cacheArchivo SHARED ROW;

CREATE COMPUTE MODULE MF_ESB_BTH_GETDETALLE_ObtenerLotes
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
 
		--((0)) Registrar el autorizador de transacciones
		DECLARE intIdTransaccion INTEGER; 	
		CALL insertarProcesoAutorizadorTransaccionBD(getID_PROCESO_3(),
														CURRENT_TIMESTAMP,
														NULL,
														NULL,
														NULL,
														getEST_0_PROCESO(),
														CURRENT_TIMESTAMP,
														intIdTransaccion);

		SET Environment.Parametros = InputRoot.MQRFH2.usr.Parametros;
		SET Environment.Parametros.Batch.idTransaccion = CAST(intIdTransaccion AS CHARACTER);
		
		--((0.2)) Envio de alertas al inicio del proceso
		
		IF ( COALESCE(InputRoot.MQRFH2.usr.Parametros.Servicio.NOTIFICA,getNO())= getSI()) THEN  
			CALL prepararMensajeCorreoAlerta(OutputRoot,getTIPO_ALERTA_1(),Environment.Parametros,NULL,NULL);
			PROPAGATE TO TERMINAL 4;
		END IF;

 		SET OutputRoot.Properties 				= InputProperties;
		SET OutputRoot.MQMD						= InputRoot.MQMD;
		SET OutputRoot.MQRFH2.usr.Parametros	= Environment.Parametros;
 		
		--((0.1)) Envio de mensaje con los Parametros para el control de alertas
		
		SET OutputRoot.XMLNSC 		= NULL; 
		PROPAGATE TO TERMINAL 3 DELETE NONE;
		

 		DECLARE refParam REFERENCE TO OutputRoot.MQRFH2.usr.Parametros;

		  
		--((1)) Obtiene el detalle de los lotes del dia.
		  	
		CALL buscarLoteProcesoAutorizador(CAST(refParam.Batch.fechaProceso AS TIMESTAMP FORMAT getFORMATO_FECHAHORA2_BD()),Environment.ResultSet1[]);
		
		--((2)) Agrupa los Lotes segun la cantidad de nodos del BUS y la cantidad de cargos.
		
		CREATE FIELD Environment.Proceso.InfoLotes;
		DECLARE refLotes REFERENCE TO Environment.Proceso.InfoLotes;
		DECLARE refResul REFERENCE TO Environment.ResultSet1;
		
		DECLARE intInd INTEGER 0;
		DECLARE intIni INTEGER 1;
		DECLARE intAux INTEGER 1;
	
		DECLARE intCantMayor INTEGER 0; 
		DECLARE intIndLista INTEGER 1;
		DECLARE intTempCant INTEGER 0;
		
		DECLARE intCantNodos INTEGER CAST(refParam.Batch.cantNodos AS INTEGER);
		   
		WHILE intIni <= intCantNodos DO
			CREATE NEXTSIBLING OF refLotes AS refLotes REPEAT;
			SET refLotes.lotesUnidos 	= '';
			SET refLotes.cantCargos 	= 0;
			SET intIni = intIni + 1;
		END WHILE;

		DELETE FIRSTCHILD OF Environment.Proceso;
			  
		WHILE LASTMOVE(refResul) DO
			 
			SET intInd = obtieneIndice(intInd,intCantNodos,intIndLista);
			SET intTempCant = Environment.Proceso.InfoLotes[intInd].cantCargos +  refResul.NRO_CARGOS;
			
			IF (intTempCant >= intCantMayor) THEN
				SET intCantMayor 	= intTempCant;
				SET intIndLista 	= intInd;
			ELSE	
				SET intInd = obtieneIndice(intInd,intCantNodos,intIndLista);
			END IF;
			
			SET Environment.Proceso.InfoLotes[intInd].lotesUnidos 	= Environment.Proceso.InfoLotes[intInd].lotesUnidos || ',' || CAST(refResul.ID_LOTE AS CHARACTER);
			SET Environment.Proceso.InfoLotes[intInd].cantCargos 	= intTempCant; --info
 			
 			IF (FIELDTYPE(Environment.Proceso.InfoLotes[intInd].ListadoLotes.Lote) IS NULL) THEN
 				CREATE FIELD Environment.Proceso.InfoLotes[intInd].ListadoLotes.Lote[1];
 			ELSE
 				SET intAux = CARDINALITY(Environment.Proceso.InfoLotes[intInd].ListadoLotes.Lote[])+1;
 				CREATE FIELD Environment.Proceso.InfoLotes[intInd].ListadoLotes.Lote[intAux] ;
 			END IF;
 			
 			SET Environment.Proceso.InfoLotes[intInd].ListadoLotes.Lote[intAux] = refResul;

			MOVE refResul NEXTSIBLING REPEAT TYPE NAME;

		END WHILE;

		CREATE NEXTSIBLING OF OutputRoot.MQRFH2 DOMAIN 'XMLNSC';
		
		SET intIni = 1;
		
		WHILE intIni <= intCantNodos DO
			
			SET OutputRoot.XMLNSC.MENSAJE.LOTES.QMBUS 		= QueueManagerName;		
			SET OutputRoot.XMLNSC.MENSAJE.LOTES.IDARCHIVO 	= intIni;
			SET OutputRoot.XMLNSC.MENSAJE.LOTES.NROS 		= TRIM(LEADING  ',' FROM Environment.Proceso.InfoLotes[intIni].lotesUnidos);
			SET OutputRoot.XMLNSC.MENSAJE.LOTES.CANCARGOS 	= Environment.Proceso.InfoLotes[intIni].cantCargos;
			SET OutputRoot.XMLNSC.MENSAJE.LOTES.INFOLOTES 	= Environment.Proceso.InfoLotes[intIni].ListadoLotes;
			SET OutputRoot.XMLNSC.MENSAJE.LOTES.CANCARGOSTOTAL = COALESCE((SELECT SUM(P.NRO_CARGOS) FROM Environment.ResultSet1[] as P ),Environment.Proceso.InfoLotes[intIni].cantCargos);
			
			--Se envia a la cola que esta en cluster en ambos Nodos para que la carga de la creacion del archivo sea balanceada
			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = 'IB.BTH.GENCAR1.GENARCHIVO.REQ.01';		 
						  
			PROPAGATE TO TERMINAL 1 DELETE NONE;
			SET OutputRoot.XMLNSC.MENSAJE.LOTES = NULL;
			SET intIni = intIni + 1;
			
		END WHILE;
		
		SET cacheArchivo.ArchivoCargo = NULL;

		--((3)) Registro de Log del Proceso
		
		SET OutputRoot.Properties 	= NULL;
		SET OutputRoot.XMLNSC 		= NULL; 
		CALL armarMensajeLogProceso(OutputRoot,
									refParam.Batch.idProceso, 
									CAST(refParam.Batch.idTransaccion AS CHARACTER),   
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Obtuvo lista de Lotes y se crearan ' || refParam.Batch.cantNodos || ' archivos');
		
		PROPAGATE TO TERMINAL 2 DELETE NONE;


		--((4)) Envio de mensaje con los Parametros para el control de alertas
		
		SET OutputRoot.XMLNSC 		= NULL; 
		PROPAGATE TO TERMINAL 3;

		
		RETURN FALSE;
	END;


 

END MODULE;


CREATE COMPUTE MODULE MF_ESB_BTH_GETDETALLE_ValidarArchivos
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	 	  
	 	--((1)) Validacion de archivos de lotes con sus cargos cerrados.
	 	DECLARE refParam REFERENCE TO InputRoot.MQRFH2.usr.Parametros;
		DECLARE bolSw BOOLEAN FALSE;
		DECLARE chrTotal CHARACTER;
		  
		ROUTING : BEGIN ATOMIC 
		
			DECLARE intCan INTEGER 0;
			
			SET cacheArchivo.ArchivoCargo.total  			= CAST(InputBody.ARCHIVO.TOTAL AS INTEGER);
			SET cacheArchivo.ArchivoCargo.cerrados 			= COALESCE(cacheArchivo.ArchivoCargo.cerrados,0) + 1;
			SET cacheArchivo.ArchivoCargo.canCargos			= COALESCE(cacheArchivo.ArchivoCargo.canCargos,0) + CAST(InputBody.ARCHIVO.CANCARGOSTOTAL AS INTEGER);
			
			SET intCan = COALESCE(CARDINALITY( cacheArchivo.ArchivoCargo.LisArchivos.Archivo[]),0);
			CREATE  FIELD cacheArchivo.ArchivoCargo.LisArchivos.Archivo[intCan+1].nombre;
			SET cacheArchivo.ArchivoCargo.LisArchivos.Archivo[intCan+1].nombre= InputBody.ARCHIVO.NOMARCHIVO;
				   	
			IF (cacheArchivo.ArchivoCargo.total = cacheArchivo.ArchivoCargo.cerrados) THEN --se completaron todos los archivos de cargos
			
			
				SET bolSw		= TRUE;
				SET chrTotal	= CAST(cacheArchivo.ArchivoCargo.total AS CHARACTER);			
				SET OutputRoot 	= InputRoot;
			 
				SET OutputRoot.MQMD.ReplyToQ 		= 'IB.BTH.GENCAR1.GENARCHIVO.REQ.02';
				SET OutputRoot.MQMD.ReplyToQMgr 	= InputBody.ARCHIVO.QMBUS;
			
				SET OutputRoot.XMLNSC.ARCHIVO = NULL;		
				CREATE FIELD OutputRoot.XMLNSC.ARCHIVOSCARGO;
				SET OutputRoot.XMLNSC.ARCHIVOSCARGO.CANCARGOS 		= cacheArchivo.ArchivoCargo.canCargos;
				SET OutputRoot.XMLNSC.ARCHIVOSCARGO.LISTAARCHIVOS 	= cacheArchivo.ArchivoCargo.LisArchivos;
				
				SET cacheArchivo.ArchivoCargo = NULL;
			
			END IF;
									
		END ROUTING ; 
		
		IF (bolSw IS TRUE) THEN
			
			PROPAGATE TO TERMINAL 1;
			
			--((2)) Registro de Log del Proceso

			CALL armarMensajeLogProceso(OutputRoot,
									refParam.Batch.idProceso, 
									refParam.Batch.idTransaccion,   
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se valido el cierre de los ' || chrTotal || ' archivos de cargos.');
		
			PROPAGATE TO TERMINAL 2;
			
			RETURN FALSE;
			
		END IF;




				
	END;

	
END MODULE;

