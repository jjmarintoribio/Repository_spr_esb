BROKER SCHEMA ib.visa.esb.bth.tds
PATH ib.visa.esb.bth;


CREATE COMPUTE MODULE MF_ESB_BTH_REGARCHIVO_AFILIACION_SOLICITUD_BD_PrepararLectura
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.MQRFH2 			= InputRoot.MQRFH2;
		SET Environment.CorrelId 		= CAST(InputBody.MENSAJE.IDGRUPO AS BLOB);
		--:: CAMBIOS ::
		--SET OutputRoot.MQMD.CorrelId = Environment.CorrelId;
		--:: CAMBIOS ::

		SET Environment.cantidadRegistros = InputBody.MENSAJE.TOTALREGISTROS;
		--Bucle para obtener todos los registros un grupo del archivo cargado
		CREATE FIELD Environment.XMLNSC.resultado.error;
		DECLARE refError REFERENCE TO Environment.XMLNSC.resultado.error;		
		
		--????????????????????????????????????????????????????????????????????????????????????????
		DECLARE nroTarjetaEnmascarado CHARACTER;
        DECLARE nroTarjetaEncriptado  CHARACTER;
        DECLARE tipoCargo,intTipoPeriocidad, intTipoDocumento,intFlagReintento, intEstado INTEGER;
        DECLARE outIdProducto INTEGER;
        DECLARE outCantMesesVigencia INTEGER;
        DECLARE outIdAfiliacion INTEGER;
        DECLARE outFecCaducidad TIMESTAMP;
        DECLARE outResultado INT;
        DECLARE outResultadoMsj CHARACTER;
        DECLARE outResultOk INT 0;
        DECLARE outResultFail INT 0;    
        DECLARE inFecPago DATE;  
        DECLARE hasErrors BOOLEAN TRUE;
        DECLARE tipoDocumento INT;
        DECLARE numeroDocumento CHARACTER;        
		
		DECLARE refMqrfh2 REFERENCE TO Environment.MQRFH2.usr.Parametros.Batch;

		DECLARE refRegis REFERENCE TO InputRoot.XMLNSC.MENSAJE.REGISTROS.REGISTRO;

        WHILE LASTMOVE(refRegis) DO		
        
        -- (1) Validar los campos de entrada del archivo de afiliación
        
	
	        SET inFecPago = CAST( RIGHT('00' || refRegis.CARGO_DIA,2) || '/' || 
	                              RIGHT('00' || refRegis.CARGO_MES,2) || '/' || 
	                              refRegis.CARGO_ANHO AS DATE FORMAT 'dd/MM/yyyy');
	        
	        
	        IF UCASE(refRegis.CARGO_TIPO) = 'V' THEN
	            SET tipoCargo = 1;
	        ELSE
	            SET tipoCargo = 0;
	        END IF;
	        
	        IF UCASE(refRegis.CARGO_PERIODICIDAD) = '14' THEN
	            SET intTipoPeriocidad = 0;
	        ELSEIF UCASE(refRegis.CARGO_PERIODICIDAD) = '1' THEN
	            SET intTipoPeriocidad = 1;
	        ELSEIF UCASE(refRegis.CARGO_PERIODICIDAD) = '6' THEN
	            SET intTipoPeriocidad = 2;
	        ELSEIF UCASE(refRegis.CARGO_PERIODICIDAD) = '12' THEN
	            SET intTipoPeriocidad = 3;                            
	        END IF;
	        
	        IF UCASE(refRegis.TITULAR_TIPO_DOC) = '1' THEN
	            SET intTipoDocumento = 0;
	        ELSEIF UCASE(refRegis.TITULAR_TIPO_DOC) = '2' THEN
	            SET intTipoDocumento = 1;
	        ELSEIF UCASE(refRegis.TITULAR_TIPO_DOC) = '3' THEN
	            SET intTipoDocumento = 2;
	        ELSEIF UCASE(refRegis.TITULAR_TIPO_DOC) = '' THEN
	            SET intTipoDocumento = 0;                            
	        END IF;
	        
	        IF UCASE(refRegis.REINTENTO_AUTOMATICO) = '1' THEN
	            SET intFlagReintento = 1;        
	        ELSE
	        	SET intFlagReintento = 0;
	        END IF;
	        
	        IF UCASE(refRegis.ESTADO) = 'A' THEN
	        	SET intEstado = 3;
	        END IF;
	        IF UCASE(refRegis.ESTAOD) = 'R' THEN
	        	SET intEstado = 2;
	        END IF;
	        
	                -- (2) Insertar nueva afiliación
	        CALL insertarNuevaAfiliacionDsSol(CAST(refRegis.NRO_AFILIACION AS INTEGER), 
	                                      intTipoDocumento,
	                                      COALESCE(refRegis.TITULAR_NRO_DOC,'11111111'),
	                                      refRegis.TITULAR_TELEFONO,
	                                      refRegis.TITULAR_EMAIL,
	                                      refRegis.NRO_IDENTIFICACION,
	                                      refRegis.USUARIO_NOMBRES,                                      
	                                      refRegis.USUARIO_APE_PATERNO,
	                                      refRegis.USUARIO_APE_MATERNO,
	                                      tipoCargo,
	                                      CAST(REPLACE(refRegis.CARGO_MONTO,'''','') AS DECIMAL),
	                                      obtenerTimestampSinHora(inFecPago),
	                                      intTipoPeriocidad,
	                                      refMqrfh2.Metadata.codigoUsuarioCreacion,
	                                      refMqrfh2.Metadata.ipCreacion,
	                                      CAST(refMqrfh2.idTransaccion AS INTEGER),
	                                      intFlagReintento,
	                                      refRegis.MSG_DENEGACION,
	                                      intEstado,
	                                      outIdProducto,                                      
	                                      outCantMesesVigencia,
	                                      outIdAfiliacion,
	                                      outFecCaducidad,
	                                      outResultadoMsj,
	                                      outResultado); 
	        
	        IF outResultado = 0 THEN
	            SET outResultFail = 1; 
	        ELSE
	            SET outResultOk = 1;
	        END IF;
	        
	        SET Environment.cantidadRegistrosOk =  CAST(COALESCE(Environment.cantidadRegistrosOk ,0)AS INTEGER) +  outResultOk;
	        SET Environment.cantidadRegistrosFail =  CAST(COALESCE(Environment.cantidadRegistrosFail ,0)AS INTEGER) +  outResultFail;
	        
	         --SI ES APROBADO
	        IF intEstado = 3 THEN
	        	   IF outIdAfiliacion IS NULL THEN
			            --SET OutputRoot.XMLNSC.MENSAJE.ERROR = 'NO SE REGISTRO AFILIACION DEBIDO :: ' || outResultadoMsj;
	        	   ELSE
		        	-- GENERAR CARGOS
		            DECLARE indice INTEGER 1;
		            DECLARE outIdLote INTEGER;
		            --cambio importacion periodicidad
		            /*DECLARE fecCargo DATE obtenerSiguienteFechaCargo(obtenerFechaMenosMeses(inFecPago,1),
		                                                             intTipoPeriocidad,
		                                                             EXTRACT(DAY FROM inFecPago));*/
					DECLARE fecCargo DATE obtenerPrimeraFechaCargo(inFecPago,intTipoPeriocidad);--cambio importacion periodicidad
					--Cambio fec_proceso 2802 primer cargo 12/11/2015
					DECLARE inMes INTEGER EXTRACT(MONTH FROM inFecPago);
					DECLARE inDia INTEGER -1;
					IF  inMes = 2 AND (EXTRACT(DAY FROM inFecPago) = 28 OR EXTRACT(DAY FROM inFecPago)=29) THEN
						SET inDia = 30;
					ELSE
						SET inDia = EXTRACT(DAY FROM inFecPago);
					END IF;
					----------------------------------		                                                             
		            --SET OutputRoot.XMLNSC.MENSAJE.fecCargo = fecCargo;
		            WHILE fecCargo < outFecCaducidad  DO
		                
		                CALL obtenerLoteIngresarActualizarSiExiste(outIdProducto,
		                                                           obtenerTimestampSinHora(fecCargo),
		                                                           1,-- NUM CARGOS
		                                                           CAST(REPLACE(refRegis.CARGO_MONTO,'''','') AS DECIMAL),
		                                                           0,--ESTADO LOTE (PENDIENTE)
		                                                           CURRENT_TIMESTAMP,
		                                                           refMqrfh2.Metadata.codigoUsuarioCreacion,
		                                                             refMqrfh2.Metadata.ipCreacion,
		                                                             CAST(refMqrfh2.Metadata.idComercio AS INTEGER),
		                                                           outIdLote);
		                DECLARE outIdCargo INTEGER;                                           
		                CALL insertarCargo(outIdAfiliacion,
		                                   outIdLote,
		                                   obtenerTimestampSinHora(fecCargo),
		                                   CAST(REPLACE(refRegis.CARGO_MONTO,'''','') AS DECIMAL),
		                                   0,-- NUMERO DE REINTENTOS
		                                   0,--ESTADO CARGO (PENDIENTE),
		                                   CURRENT_TIMESTAMP,
		                                   refMqrfh2.Metadata.codigoUsuarioCreacion,
		                                   refMqrfh2.Metadata.ipCreacion,
		                                   outIdCargo);
		                                                                                              
		                --SET fecCargo = obtenerSiguienteFechaCargo(fecCargo,intTipoPeriocidad,EXTRACT(DAY FROM fecCargo));
		                SET fecCargo = obtenerSiguienteFechaCargo(fecCargo,intTipoPeriocidad,inDia);
		                
		                SET Environment.renovacion.FEC_CARGO[indice] = fecCargo;--IMPRIMIR
		                SET indice = indice +1;
		            END WHILE;
		            --SET OutputRoot.XMLNSC.MENSAJE.ERROR = 'Se generaron correctamente los cargos para la afiliacion: ' || CAST(outIdAfiliacion AS CHARACTER);
	        	   END IF;	 
	        	
	        END IF;
	        --Arma una lista con los errores que ocurran para escribirlos en un archivo
			IF (outResultado = 0) THEN --Imprime en el archivo log, solo aquellos que contengan error de lógica negocio
				SET refError.nro_registro = COALESCE(refRegis.NRO_RECORD,'');
				SET refError.mensaje = outResultadoMsj;							
				SET refError.codigo = obtenerRespuestaPorCodigo(outResultado);
				CREATE LASTCHILD OF Environment.XMLNSC.resultado NAME 'error';
				MOVE refError NEXTSIBLING;
				
			END IF;
			
			SET outResultFail = 0;
			 SET outResultOk = 0;
			 

			MOVE refRegis NEXTSIBLING REPEAT TYPE NAME;
	        
	        
	        END WHILE;
	        
	        
	        DELETE LASTCHILD OF Environment.XMLNSC.resultado;
	        
	        -- Envio de la lista de logs de los registros que tuvieron erores
	 		
	 		DECLARE refError1 REFERENCE TO Environment.XMLNSC.resultado.error;
	 
			WHILE LASTMOVE(refError1) DO
	 		
				SET OutputRoot.XMLNSC.resultado = refError1;
		
				SET OutputLocalEnvironment.Destination.File.Directory = COALESCE(Environment.MQRFH2.usr.Parametros.Servicio.PATHFILERROR,Environment.MQRFH2.usr.Parametros.ESB.PATHFILERROR) || 'temp/';
				SET OutputLocalEnvironment.Destination.File.Name = refMqrfh2.nombreArchivo || '.log';
		
				PROPAGATE TO TERMINAL 1;
				MOVE refError1 NEXTSIBLING REPEAT TYPE NAME;
			END WHILE;
	        		
	
			--Envio de la validacion del fin de archivo
			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName 		= 'IB.BTH.GENBTH.CTRLFINPROCESO.REQ.01'; 
			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName 	= InputBody.MENSAJE.QMPROCESO;
	
	
			SET OutputRoot.MQMD.Format 					= 'MQHRF2  '; 
			SET OutputRoot.MQRFH2.usr = Environment.MQRFH2.usr;
			SET OutputRoot.XMLNSC.MENSAJE.IDGRUPO 		= InputBody.MENSAJE.IDGRUPO;
			SET OutputRoot.XMLNSC.MENSAJE.IDTRANSACCION = InputBody.MENSAJE.IDTRANSACCION;		
			
			PROPAGATE TO TERMINAL 2;
			
			--Envio de los totales de registros que fueron impactados en BD
	
			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName 		= 'IB.BTH.IMPAFIDSSOL.CTRLREGISTRO.REQ.01'; 
			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName 	= InputBody.MENSAJE.QMPROCESO;		
			SET OutputRoot.MQMD.Format 					= 'MQHRF2  ';
			SET OutputRoot.MQMD.CorrelId  = CAST(InputBody.MENSAJE.IDTRANSACCION AS BLOB);
			SET OutputRoot.MQRFH2.usr = Environment.MQRFH2.usr;
			SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROS		= 	 Environment.cantidadRegistros ;
			SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROSOK   = 	 Environment.cantidadRegistrosOk ;
			SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROSFAIL = 	 Environment.cantidadRegistrosFail;
						
			PROPAGATE TO TERMINAL 3;
			
       
		
		RETURN FALSE;
	END;

END MODULE;


CREATE COMPUTE MODULE MF_ESB_BTH_REGARCHIVO_AFILIACION_SOLICITUD_BD_ControlarError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--((1))Grabar error en archivo
		DECLARE chrCodError CHARACTER '';
		DECLARE chrMsjError CHARACTER ''; 

		CALL obtenerDetalleError(InputExceptionList,chrCodError,chrMsjError);
		
		CREATE LASTCHILD OF Environment DOMAIN 'XMLNSC';
 		SET Environment.XMLNSC.resultado.mensaje = chrMsjError;
 		SET Environment.XMLNSC.resultado.codigo  = chrCodError;

		DECLARE inCCSID INT getENCODING();                     
		DECLARE inEncoding INT InputProperties.Encoding;
		                        
		SET OutputRoot.BLOB.BLOB = ASBITSTREAM(Environment.XMLNSC, inEncoding, inCCSID); 
		SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(InputRoot.MQRFH2.usr.Parametros.Servicio.PATHFILERROR,InputRoot.MQRFH2.usr.Parametros.ESB.PATHFILERROR);
		SET OutputLocalEnvironment.Destination.File.Name 		= InputRoot.MQRFH2.usr.Parametros.Batch.nombreArchivo || '.log';
		
		PROPAGATE TO TERMINAL 3;
		
		--((2))
		SET OutputRoot = InputRoot;
		PROPAGATE TO TERMINAL 1;
		
		--((3))
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName 		= 'IB.BTH.IMPAFIDSSOL.CTRLREGISTRO.REQ.01'; 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName 	= InputBody.MENSAJE.QMPROCESO;		
		SET OutputRoot.MQMD.Format 							= 'MQHRF2  ';
		SET OutputRoot.MQMD.CorrelId  						= CAST(InputBody.MENSAJE.IDTRANSACCION AS BLOB);
		SET OutputRoot.MQRFH2.usr 							= InputRoot.MQRFH2.usr;
		SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROS		= InputBody.MENSAJE.TOTALREGISTROS ;
		SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROSOK   = 0 ;
		SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROSFAIL = InputRoot.XMLNSC.MENSAJE.REGISTROSGRUPO ;
		
		PROPAGATE TO TERMINAL 2;
		
		
		
		RETURN FALSE;
	END;

END MODULE;