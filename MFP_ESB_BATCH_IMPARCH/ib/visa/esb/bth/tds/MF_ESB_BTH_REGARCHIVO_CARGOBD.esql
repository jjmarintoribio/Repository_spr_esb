BROKER SCHEMA ib.visa.esb.bth.tds
PATH ib.visa.esb.bth;


CREATE COMPUTE MODULE MF_ESB_BTH_REGARCHIVO_CARGOBD_PrepararLectura
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		SET Environment.CorrelId = CAST(InputBody.MENSAJE.IDGRUPO AS BLOB);
		--SET OutputRoot.MQMD.CorrelId 	= Environment.CorrelId;

		
--		SET Environment.cantidadRegistros = InputBody.MENSAJE.TOTALREGISTROS;
		--Bucle para obtener todos los registros un grupo del archivo cargado
		CREATE FIELD Environment.XMLNSC.resultado.error;
		DECLARE refError REFERENCE TO Environment.XMLNSC.resultado.error;	
		--CAMBIOS :: INICIO
		DECLARE outResultado INT;
		DECLARE outResultadoMsj CHARACTER;
		DECLARE outResultOk INT 0;
		DECLARE outResultFail INT 0;
		
		DECLARE refMqrfh2 REFERENCE TO Environment.MQRFH2.usr.Parametros.Batch;
		DECLARE refRegis REFERENCE TO InputRoot.XMLNSC.MENSAJE.REGISTROS.REGISTRO;
		
		
		WHILE LASTMOVE(refRegis) DO		
			
			SET Environment.output.idComercio  = CAST(refMqrfh2.Metadata.idComercio AS INTEGER);
			SET Environment.output.nroIdentificacion  = REPLACE(refRegis.NRO_IDENTIFICACION_BENEFICIARIO,'''','');
			SET Environment.output.codProducto  = refRegis.COD_PRODUCTO;
			SET Environment.output.fecEstimada  = CAST(refRegis.FEC_ESTIMADA_PAGO AS DATE FORMAT 'yyyy-MM-dd');
			SET Environment.output.fecProcesoPago  =  CAST(refRegis.FEC_PROCESO_PAGO AS DATE FORMAT 'yyyy-MM-dd');
			SET Environment.output.nroRecibo  = REPLACE(refRegis.NRO_RECIBO,'''','');
			SET Environment.output.mtoCargo  = CAST(REPLACE(refRegis.MTO_CARGO,'''','') AS DECIMAL);
			SET Environment.output.codigoUsuario  = refMqrfh2.Metadata.codigoUsuarioCreacion;
		
		 --TODO //RMQ: cambio para importacion// 
			CALL insertarImportacionCargoTemporal(refMqrfh2.idTransaccion,
										 REPLACE(refRegis.NRO_IDENTIFICACION_BENEFICIARIO,'''',''),
										 refRegis.COD_PRODUCTO,
										 CAST(refRegis.FEC_ESTIMADA_PAGO AS DATE FORMAT 'yyyy-MM-dd'),
										 CAST(refRegis.FEC_PROCESO_PAGO AS DATE FORMAT 'yyyy-MM-dd'),
										 CAST(REPLACE(refRegis.MTO_CARGO,'''','') AS DECIMAL),
										 REPLACE(refRegis.NRO_RECIBO,'''',''),
										 CAST(refRegis.NRO_RECORD AS INTEGER)); --cambio importacion 0308
										 										 										 
		
				IF SQLCODE <> 0 THEN
					
						SET refError.nro_registro = COALESCE(refRegis.NRO_RECORD,'');
						SET refError.mensaje = SQLNATIVEERROR;				
						SET refError.codigo = SQLCODE;
						CREATE LASTCHILD OF Environment.XMLNSC.resultado NAME 'error';
						MOVE refError NEXTSIBLING;
					
				END IF;

										 										 
	/*		 IF outResultado = 0 THEN
				SET outResultFail = 1;
			ELSE
				SET outResultOk = 1;
			END IF;
			SET Environment.cantidadRegistrosOk = CAST(COALESCE(Environment.cantidadRegistrosOk ,0)AS INTEGER) + outResultOk;
			SET Environment.cantidadRegistrosFail = CAST(COALESCE(Environment.cantidadRegistrosFail ,0)AS INTEGER) + outResultFail;		
										 
			IF (outResultado = 0) THEN --Imprime en el archivo log, solo aquellos que contengan error de l√≥gica negocio
				SET refError.nro_registro = COALESCE(refRegis.NRO_RECORD,'');
				SET refError.mensaje = outResultadoMsj;				
				SET refError.codigo = obtenerRespuestaPorCodigo(outResultado);
				CREATE LASTCHILD OF Environment.XMLNSC.resultado NAME 'error';
				MOVE refError NEXTSIBLING;
				
			END IF;
			
			SET outResultFail = 0;
			SET outResultOk = 0;
			*/
		
			MOVE refRegis NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;
		
		
		DELETE LASTCHILD OF Environment.XMLNSC.resultado;
		
		DECLARE refError1 REFERENCE TO Environment.XMLNSC.resultado.error;
		
		
		WHILE LASTMOVE(refError1) DO
 			--escribir en el log
			SET OutputRoot.XMLNSC.resultado = refError1;
			SET OutputLocalEnvironment.Destination.File.Directory = COALESCE(Environment.MQRFH2.usr.Parametros.Servicio.PATHFILERROR,Environment.MQRFH2.usr.Parametros.ESB.PATHFILERROR) || 'temp/';
			SET OutputLocalEnvironment.Destination.File.Name = refMqrfh2.nombreArchivo || '.log';
			PROPAGATE TO TERMINAL 1;
			--enviar correo
			/*IF (COALESCE(InputRoot.MQRFH2.usr.Parametros.Servicio.NOTIFICA,getNO())= getSI()) THEN 
				CALL prepararMensajeCorreoAlerta(OutputRoot,getTIPO_ALERTA_4(),InputRoot.MQRFH2.usr.Parametros,refError1.mensaje,MessageFlowLabel);
				PROPAGATE TO TERMINAL 4;
			END IF;*/
						
			MOVE refError1 NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;
		
		
		--Envio de la validacion del fin de archivo
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName 		= 'IB.BTH.GENBTH.CTRLFINPROCESO.REQ.01'; 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName 	= InputBody.MENSAJE.QMPROCESO;


		SET OutputRoot.MQMD.Format 					= 'MQHRF2  '; 
		SET OutputRoot.MQRFH2.usr = Environment.MQRFH2.usr;
		SET OutputRoot.XMLNSC.MENSAJE.IDGRUPO 		= InputBody.MENSAJE.IDGRUPO;
		SET OutputRoot.XMLNSC.MENSAJE.IDTRANSACCION = InputBody.MENSAJE.IDTRANSACCION;		
		
		
		--cambio importacion
		SET OutputRoot.XMLNSC.MENSAJE.CANTIDADIMP = InputRoot.XMLNSC.MENSAJE.TOTALREGISTROS;
		--
		PROPAGATE TO TERMINAL 2;
				
			--Envio de los totales de registros que fueron impactados en BD

		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = 'IB.BTH.IMPCARGO.CTRLREGISTRO.REQ.01';
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName = InputBody.MENSAJE.QMPROCESO;
		SET OutputRoot.MQMD.Format = 'MQHRF2  ';
		SET OutputRoot.MQMD.CorrelId = CAST(InputBody.MENSAJE.IDTRANSACCION AS BLOB);
		SET OutputRoot.MQRFH2.usr = Environment.MQRFH2.usr;
		--SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROS = Environment.cantidadRegistros ;
		--SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROSOK = Environment.cantidadRegistrosOk ;
		--SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROSFAIL = Environment.cantidadRegistrosFail;

		/**/
		/*Inicio Synopsis RMQ Modificado para CE*/
		--PROPAGATE TO TERMINAL 3;
		PROPAGATE TO TERMINAL 0;
		/*Fin Synopsis RMQ Modificado para CE*/

		RETURN FALSE;		
	END;

------------------------------------------------------------------------------

 CREATE PROCEDURE insertarImportacionCargoTemporal (
   												   	IN P_ID_TRANSACCION CHARACTER,
													IN P_NRO_IDENTIFICACION_BENEFICIARIO CHARACTER,
													IN P_ID_PRODUCTO CHARACTER, 
													IN P_FEC_ESTIMADA_PAGO DATE,
													IN P_FEC_PROCESO_PAGO DATE,
													IN P_MTO_CARGO DECIMAL,
													IN P_NRO_RECIBO CHARACTER,
													IN P_NRO_REGISTRO INTEGER)		
	LANGUAGE DATABASE
	EXTERNAL NAME "SPRESB.SP_TMP_IMPORTACION_CARGO_INSERTAR";

END MODULE;




CREATE COMPUTE MODULE  MF_ESB_BTH_REGARCHIVO_CARGOBD_ControlarError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		SET OutputRoot = InputRoot;
		
		PROPAGATE TO TERMINAL 1;
		
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName 		= 'IB.BTH.IMPCARGO.CTRLREGISTRO.REQ.01'; 
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName 	= InputBody.MENSAJE.QMPROCESO;		
		SET OutputRoot.MQMD.Format 					= 'MQHRF2  ';
		SET OutputRoot.MQMD.CorrelId  = CAST(InputBody.MENSAJE.IDTRANSACCION AS BLOB);
		SET OutputRoot.MQRFH2.usr = InputRoot.MQRFH2.usr;
		SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROS		= 	 InputBody.MENSAJE.TOTALREGISTROS ;
		SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROSOK   = 	 0 ;
		SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROSFAIL = 	 InputRoot.XMLNSC.MENSAJE.REGISTROSGRUPO ;
		
		PROPAGATE TO TERMINAL 2;
		
		RETURN FALSE;
	END;
END MODULE;				
