 
BROKER SCHEMA ib.visa.esb.bth.tds
 PATH ib.visa.esb.bth; 

CREATE COMPUTE MODULE MF_ESB_BTH_IMPARCH_MOD_AFILIACION_FIN_EjecutarFinalizacionCarga
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN 
		
		--((1)) hacer que cambie el estado de un proceso
		
		SET Environment.finArchivo.IdProceso		  = InputRoot.MQRFH2.usr.Parametros.Batch.idProceso;
		SET Environment.finArchivo.IdTransaccion	  = InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion;
		SET Environment.Parametros 					  = InputRoot.MQRFH2.usr.Parametros;
		DECLARE refParam REFERENCE TO Environment.Parametros;
			
		CALL armarMensajeLogProceso(OutputRoot,
									InputRoot.MQRFH2.usr.Parametros.Batch.idProceso, 
									InputRoot.MQRFH2.usr.Parametros.Batch.idTransaccion,   
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'Se termino de actualizar en BD el archivo de Importacion ' || InputRoot.MQRFH2.usr.Parametros.Batch.nombreArchivo);
		
		PROPAGATE TO TERMINAL 1;
		
		
		--((2)) se cambia el semaforo a verde
		SET OutputRoot.XMLNSC.MENSAJE.PROCESANDO = getNO();
		
		PROPAGATE TO TERMINAL 2;			
		
		--((3)) Manda a sacar todos los mensajes de los registros impactados
		
		SET Environment.flagFinArchivo = TRUE;
		
		WHILE Environment.flagFinArchivo IS TRUE DO
			SET OutputRoot.MQMD.CorrelId = CAST(InputBody.MENSAJE.IDTRANSACCION AS BLOB);
			PROPAGATE TO TERMINAL 3;
			
		END WHILE;
		
		--((4)) Envio de alertas al fin  del proceso
		SET refParam.Batch.horaFinProceso = obtenerFechaHoraActual(2);
		 
		IF ( COALESCE(refParam.Servicio.NOTIFICA,getNO())= getSI()) THEN  
			CALL prepararMensajeCorreoAlerta(OutputRoot,getTIPO_ALERTA_2(),refParam,NULL,NULL);
			PROPAGATE TO TERMINAL 4;
		END IF;	
		
		RETURN FALSE;
	END;

END MODULE;



CREATE COMPUTE MODULE MF_ESB_BTH_IMPARCH_MOD_AFILIACION_FIN_ControlarError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN 
		
		--((1)) se cambia el semaforo a verde
		SET OutputRoot.XMLNSC.MENSAJE.PROCESANDO = getNO();

		RETURN TRUE;
	END;

END MODULE;



CREATE COMPUTE MODULE MF_ESB_BTH_IMPARCH_MOD_AFILIACION_FIN_ContadorImportaciones
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN 
		
		SET Environment.finArchivo.TotalRegistrosOk = CAST(COALESCE(Environment.finArchivo.TotalRegistrosOk,0) AS INTEGER) + CAST(InputBody.MENSAJE.CANTIDADREGISTROSOK AS INTEGER);
		SET Environment.finArchivo.TotalRegistrosFail = CAST(COALESCE(Environment.finArchivo.TotalRegistrosFail,0) AS INTEGER) + CAST(InputBody.MENSAJE.CANTIDADREGISTROSFAIL AS INTEGER);
		SET Environment.finArchivo.TotalRegistros  = InputBody.MENSAJE.CANTIDADREGISTROS;
		
		RETURN FALSE;
	END;

END MODULE;

CREATE COMPUTE MODULE MF_ESB_BTH_IMPARCH_MOD_AFILIACION_FIN_ActualizarImportacionCantidad
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN 
		
		DECLARE estadoProcesoImp INTEGER 2;-- ESTADO DE PROCESO (PROCESADO)
		DECLARE intRegistrosTotal INTEGER CAST(COALESCE(Environment.finArchivo.TotalRegistros,0) AS INTEGER);
		DECLARE intRegistrosFail INTEGER;
		SET intRegistrosFail = CAST(COALESCE(Environment.finArchivo.TotalRegistrosFail,0) AS INTEGER) + CAST(COALESCE(Environment.Parametros.registrosErrorDfdl,0) AS INTEGER);
		SET Environment.flagFinArchivo=FALSE;
		
		IF intRegistrosTotal = intRegistrosFail THEN
			SET estadoProcesoImp = 3; -- ESTADO DE PROCESO (FALLIDO)
		END IF;
			
		CALL actualizarProcesoImportacion(CAST(Environment.finArchivo.IdProceso AS INTEGER),
										  CURRENT_TIMESTAMP,
										  CAST(COALESCE(Environment.finArchivo.TotalRegistrosOk,0) AS INTEGER),
										  intRegistrosFail,
										  intRegistrosTotal,
										  estadoProcesoImp, 
										  CAST( Environment.finArchivo.IdTransaccion AS INTEGER));
		-- Req 6: logs ordenados
		CALL crearImportacionModAfiliacionTemporal(CAST(Environment.finArchivo.IdTransaccion AS CHARACTER));
		--Req 6: fin											  
		--TODO :: INICIO								  
		SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(Environment.Parametros.Servicio.PATHFILERROR,Environment.MQRFH2.usr.Parametros.ESB.PATHFILERROR) || 'temp/';
		--TODO :: FIN
		SET OutputLocalEnvironment.Destination.File.Name 		= Environment.Parametros.Batch.nombreArchivo || '.log';
		PROPAGATE TO TERMINAL 0 DELETE NONE;
		PROPAGATE TO TERMINAL 1;								  
		RETURN FALSE;
	END;
	--Req 6: logs ordenados
   	CREATE PROCEDURE crearImportacionModAfiliacionTemporal (IN P_ID_TRANSACCION CHARACTER)		
	LANGUAGE DATABASE
	EXTERNAL NAME "SPRESB.SP_IMPORTACION_MODIF_AFILIACION_CREAR_TEMPORAL";
	--Req 6: fin	
END MODULE;

CREATE COMPUTE MODULE MF_ESB_BTH_IMPARCH_MOD_AFILIACION_FIN_MoverArchivoTemp
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN 
--		SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(Environment.Parametros.Servicio.PATHFILERROR,Environment.MQRFH2.usr.Parametros.ESB.PATHFILERROR) || 'temp/';
--		SET OutputLocalEnvironment.Destination.File.Name 		= Environment.Parametros.Batch.nombreArchivo || '.log';
--		RETURN TRUE;
		--	Req 6: logs ordenados
		SET Environment.File.Offset = 0; 
		SET Environment.File.EndOfFile = FALSE;  
		DECLARE intRegistrosFail INTEGER;
		SET intRegistrosFail = CAST(COALESCE(Environment.finArchivo.TotalRegistrosFail,0) AS INTEGER) + CAST(COALESCE(Environment.Parametros.registrosErrorDfdl,0) AS INTEGER);
		
		IF CAST(COALESCE(intRegistrosFail,0) AS INTEGER) > 0 THEN          
			WHILE Environment.File.EndOfFile = FALSE DO 
			    SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(Environment.Parametros.Servicio.PATHFILERROR,Environment.MQRFH2.usr.Parametros.ESB.PATHFILERROR) || 'temp/';
				SET OutputLocalEnvironment.Destination.File.Name 		= Environment.Parametros.Batch.nombreArchivo || '.log';
			    SET OutputLocalEnvironment.Destination.File.Offset = Environment.File.Offset; 
			    PROPAGATE TO TERMINAL 0; 
			END WHILE;
		END IF; 
		PROPAGATE TO TERMINAL 1; 
		RETURN FALSE; 
	END;

END MODULE;

CREATE COMPUTE MODULE MF_ESB_BTH_IMPARCH_MOD_AFILIACION_FIN_MoverArchivoFin
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN 
--		
--		SET OutputRoot = InputRoot;
--		SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(Environment.Parametros.Servicio.PATHFILERROR,Environment.MQRFH2.usr.Parametros.ESB.PATHFILERROR);
--		SET OutputLocalEnvironment.Destination.File.Name 		= Environment.Parametros.Batch.nombreArchivo || '.log';
--		RETURN TRUE;
		--Req 6: logs ordenados
		SET Environment.File.EndOfFile = InputLocalEnvironment.File.Read.EndOfFile; 
 		SET Environment.File.Offset = InputLocalEnvironment.File.Read.NextRecordOffset; 
		CALL insertarImportacionModAfiliacionTemporal(CAST(Environment.finArchivo.IdTransaccion AS CHARACTER),
												    CAST(InputRoot.XMLNSC.resultado.nro_registro AS CHARACTER),
												    CAST(InputRoot.XMLNSC.resultado.mensaje AS CHARACTER),
												    CAST(InputRoot.XMLNSC.resultado.nro_beneficiario AS CHARACTER)); 													
		RETURN TRUE;
		
		PROPAGATE TO TERMINAL 1;
	END;
   	CREATE PROCEDURE insertarImportacionModAfiliacionTemporal (IN P_ID_TRANSACCION CHARACTER,
   															IN P_NRO_REGISTRO CHARACTER,
   															IN P_MENSAJE CHARACTER,
   															IN P_NRO_BENEFICIARIO CHARACTER
   															)		
	LANGUAGE DATABASE
	EXTERNAL NAME "SPRESB.SP_IMPORTACION_MODIF_AFILIACION_INSERTAR_TEMPORAL";
	--Req 6: fin


END MODULE;

CREATE COMPUTE MODULE MF_ESB_BTH_IMPARCH_MOD_AFILIACION_FIN_FinishFile
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
			
			DECLARE intRegistrosTotal INTEGER CAST(COALESCE(Environment.finArchivo.TotalRegistros,0) AS INTEGER);
			
			--Req8: log alignet
--			DECLARE refMetadata REFERENCE TO Environment.Parametros.Batch.Metadata;
--			DECLARE tipoArchivoLog INTEGER;
--			CALL obtenerComercioTipoArchivo(CAST(refMetadata.idComercio AS INTEGER), tipoArchivoLog);
			DECLARE extensionLog CHARACTER '.log';
			--Req8 fin
			
			CALL actualizarProcesoImportacionModifAfiliacionCantidad(Environment.finArchivo.IdTransaccion,intRegistrosTotal);
			
			CALL obtenerLogImportacionModificacionAfiliacion(Environment.finArchivo.IdTransaccion,Environment.Resultset1[]); 
			
			DECLARE refResult REFERENCE TO Environment.Resultset1;			
			
			--Req8: log alignet
			IF Environment.Parametros.Batch.tipoArchivoLog = 1 THEN --LOG DE ALIGNET
				SET extensionLog = '.csv';
				SET OutputRoot.Properties.MessageSet 	= 'LogAlignet.xsd';
				SET OutputRoot.Properties.MessageType 	= '{myNs:LogAlignet}:LogAlignet';
				SET OutputRoot.Properties.Encoding 		= 273;
				SET OutputRoot.Properties.CodedCharSetId 	= 819;
				CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL' NAME 'DFDL';
				DECLARE ns01 NAMESPACE 'myNs:LogAlignet';
				
				DECLARE inCCSID INT getENCODING();                     
				DECLARE inEncoding INT InputProperties.Encoding;
				WHILE LASTMOVE(refResult) DO
					SET OutputRoot.DFDL.ns01:LogAlignet.MENSAJE.NRO_REGISTRO	= refResult.nro_registro;--'REGISTROPRUEBA';--
					SET OutputRoot.DFDL.ns01:LogAlignet.MENSAJE.ERROR			= refResult.mensaje;--'MENSAJEPRUEBA';--
					SET OutputRoot.BLOB.BLOB = ASBITSTREAM(OutputRoot.DFDL OPTIONS RootBitStream);
					SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(Environment.Parametros.Servicio.PATHFILERROR,Environment.MQRFH2.usr.Parametros.ESB.PATHFILERROR) || 'temp/';
					SET OutputLocalEnvironment.Destination.File.Name 		= Environment.Parametros.Batch.nombreArchivo || extensionLog; --Req8: log alignet
					PROPAGATE TO TERMINAL 0; --IN
					MOVE refResult NEXTSIBLING REPEAT TYPE NAME;
				END WHILE;
			
			ELSE
				SET extensionLog = '.log';
			--Req8 fin		
				WHILE LASTMOVE(refResult) DO
					SET OutputRoot.XMLNSC.resultado = refResult;
					SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(Environment.Parametros.Servicio.PATHFILERROR,Environment.MQRFH2.usr.Parametros.ESB.PATHFILERROR) || 'temp/';
					SET OutputLocalEnvironment.Destination.File.Name 		= Environment.Parametros.Batch.nombreArchivo || extensionLog; --Req8: log alignet
					PROPAGATE TO TERMINAL 0; --IN
					MOVE refResult NEXTSIBLING REPEAT TYPE NAME;
				END WHILE;
			END IF;
			
			SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(Environment.Parametros.Servicio.PATHFILERROR,Environment.MQRFH2.usr.Parametros.ESB.PATHFILERROR) || 'temp/';
			SET OutputLocalEnvironment.Destination.File.Name 		= Environment.Parametros.Batch.nombreArchivo || extensionLog; --Req8: log alignet
			PROPAGATE TO TERMINAL 1; -- FIN DE ARCHIVO
			
			--CALL dropImportacionModAfiliacionTemporal(Environment.finArchivo.IdTransaccion);
															
			SET Environment.Archivo = TRIM(InputRoot.MQRFH2.usr.Servicio.PATHFILERROR) || 'temp/';
			SET Environment.finArchivo.extensionLog	  = extensionLog;
			PROPAGATE TO TERMINAL 1; 
		
	END;
	--Req 6: logs ordenados
	CREATE PROCEDURE obtenerLogImportacionModificacionAfiliacion(IN P_ID_TRANSACCION CHARACTER)		
	LANGUAGE DATABASE
	DYNAMIC RESULT SETS 1
	EXTERNAL NAME "SPRESB.SP_IMPORTACION_MODIF_AFI_ERROR_GENERAR_LOG";
	
	CREATE PROCEDURE dropImportacionModAfiliacionTemporal(IN P_ID_TRANSACCION CHARACTER)		
	LANGUAGE DATABASE
	EXTERNAL NAME "SPRESB.SP_IMPORTACION_MODIF_AFILIACION_DROP_TEMPORAL";
	
	CREATE PROCEDURE actualizarProcesoImportacionModifAfiliacionCantidad(IN P_ID_TRANSACCION CHARACTER, IN P_NRO_TOTAL INTEGER)		
	LANGUAGE DATABASE
	EXTERNAL NAME "SPRESB.SP_IMPORTACION_MODIFI_AFIL_CANTIDAD_ACTUALIZAR";
	--Req 6: fin
	
	CREATE PROCEDURE obtenerComercioTipoArchivo(IN P_ID_COMERCIO INTEGER, OUT P_ID_ARCHIVO INTEGER)		
	LANGUAGE DATABASE
	EXTERNAL NAME "SPRESB.SP_COMERCIO_OBTENER_TIPOARCHIVOLOG";
END MODULE;

CREATE COMPUTE MODULE MF_ESB_BTH_IMPARCH_MOD_AFILIACION_FIN_MoverArchivoTemp1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(Environment.Parametros.Servicio.PATHFILERROR,Environment.MQRFH2.usr.Parametros.ESB.PATHFILERROR) || 'temp/';
		SET OutputLocalEnvironment.Destination.File.Name 		= Environment.Parametros.Batch.nombreArchivo || Environment.finArchivo.extensionLog; --Req8: log alignet
		RETURN TRUE;
	END;


END MODULE;


CREATE COMPUTE MODULE MF_ESB_BTH_IMPARCH_MOD_AFILIACION_FIN_MoverArchivoFinal1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot = InputRoot;
		SET OutputLocalEnvironment.Destination.File.Directory 	= COALESCE(Environment.Parametros.Servicio.PATHFILERROR,Environment.MQRFH2.usr.Parametros.ESB.PATHFILERROR);
		SET OutputLocalEnvironment.Destination.File.Name 		= Environment.Parametros.Batch.nombreArchivo || Environment.finArchivo.extensionLog; --Req8: log alignet
		RETURN TRUE;
	END;


END MODULE;

