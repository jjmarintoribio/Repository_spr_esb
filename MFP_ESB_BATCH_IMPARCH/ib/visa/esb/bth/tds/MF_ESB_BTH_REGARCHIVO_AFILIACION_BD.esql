BROKER SCHEMA ib.visa.esb.bth.tds
PATH ib.visa.esb.bth;

CREATE COMPUTE MODULE MF_ESB_BTH_REGARCHIVO_AFILIACION_BD_PrepararLectura
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		SET Environment.MQRFH2 = InputRoot.MQRFH2;
		SET Environment.CorrelId = CAST(InputBody.MENSAJE.IDGRUPO AS BLOB);
		--:: CAMBIOS ::
		--SET OutputRoot.MQMD.CorrelId = Environment.CorrelId;
		--:: CAMBIOS ::
		 
		
		SET Environment.cantidadRegistros = InputBody.MENSAJE.TOTALREGISTROS;
		--Bucle para obtener todos los registros un grupo del archivo cargado
		
		CREATE FIELD Environment.XMLNSC.resultado.error;
		DECLARE refError REFERENCE TO Environment.XMLNSC.resultado.error;	
		
		
		--????????????????????????????????????????????????????????????????????????????????????????

		DECLARE nroTarjetaEnmascarado CHARACTER;
		DECLARE nroTarjetaEncriptado CHARACTER;
		DECLARE tipoCargo,intTipoPeriocidad,intTipoDocumento, intFlagReintento INTEGER;
		DECLARE outIdProducto INTEGER;
		DECLARE outCantMesesVigencia INTEGER;
		DECLARE outIdAfiliacion INTEGER;
		DECLARE outFecCaducidad TIMESTAMP;
		DECLARE outResultado INT;
		DECLARE outResultadoMsj CHARACTER;
		DECLARE outResultOk INT 0;
		DECLARE outResultFail INT 0;
		DECLARE inFecPago DATE;
		DECLARE hasErrors BOOLEAN TRUE;
		DECLARE tipoDocumento INT;
		DECLARE numeroDocumento CHARACTER;

		DECLARE refMqrfh2 REFERENCE TO Environment.MQRFH2.usr.Parametros.Batch;

		DECLARE refRegis REFERENCE TO InputRoot.XMLNSC.MENSAJE.REGISTROS.REGISTRO;
		
		---AFILIACIONES INSERTADAS
		/*CREATE FIELD Environment.XMLNSC.RECORDS;		
		DECLARE refFila REFERENCE TO Environment.XMLNSC.RECORDS;*/
		--

		
		WHILE LASTMOVE(refRegis) DO		
			--
			--MOVE refFila LASTCHILD;
			--
			-- (1) Validar los campos de entrada del archivo de afiliación
			SET inFecPago = CAST( RIGHT('00' || refRegis.FEC_PAGO_DIA,2) || '/' ||
			RIGHT('00' || refRegis.FEC_PAGO_MES,2) || '/' ||
			refRegis.FEC_PAGO_ANIO AS DATE FORMAT 'dd/MM/yyyy');			


			IF UCASE(refRegis.TIPO_CARGO) = 'V' THEN
				SET tipoCargo = 1;
			ELSE
				SET tipoCargo = 0;
			END IF;

			IF UCASE(refRegis.TIPO_PERIODICIDAD) = '14' THEN
				SET intTipoPeriocidad = 0;
			ELSEIF UCASE(refRegis.TIPO_PERIODICIDAD) = '1' THEN
				SET intTipoPeriocidad = 1;
			ELSEIF UCASE(refRegis.TIPO_PERIODICIDAD) = '6' THEN
				SET intTipoPeriocidad = 2;
			ELSEIF UCASE(refRegis.TIPO_PERIODICIDAD) = '12' THEN
				SET intTipoPeriocidad = 3;
			ELSEIF UCASE(refRegis.TIPO_PERIODICIDAD) = '3' THEN --Req3_Mayo
				SET intTipoPeriocidad = 4;
			END IF;	
						


			IF UCASE(refRegis.TITULAR_TIPO_DOCUMENTO) = '1' THEN
				SET intTipoDocumento = 0;
			ELSEIF UCASE(refRegis.TITULAR_TIPO_DOCUMENTO) = '2' THEN
				SET intTipoDocumento = 1;
			ELSEIF UCASE(refRegis.TITULAR_TIPO_DOCUMENTO) = '3' THEN
				SET intTipoDocumento = 2;
			ELSEIF UCASE(refRegis.TITULAR_TIPO_DOCUMENTO) = '' OR refRegis.TITULAR_TIPO_DOCUMENTO IS NULL THEN
				SET intTipoDocumento = 0;
			END IF;

			IF UCASE(refRegis.REINTENTO_AUTOMATICO) = '' OR refRegis.REINTENTO_AUTOMATICO IS NULL THEN
				SET intFlagReintento = 0;
			ELSEIF UCASE(refRegis.REINTENTO_AUTOMATICO) = '1' THEN
				SET intFlagReintento = 1;
			ELSE
				SET intFlagReintento = 0;
			END IF;
			
			SET numeroDocumento = '11111111';
			IF refRegis.TITULAR_NRO_DOCUMENTO = '' or refRegis.TITULAR_NRO_DOCUMENTO is null THEN --CAMBIO NUEVO
				SET numeroDocumento = '11111111';
			ELSE
				SET numeroDocumento = refRegis.TITULAR_NRO_DOCUMENTO;
			END IF;

			SET nroTarjetaEnmascarado = enmascararNumeroTarjeta(REPLACE(refRegis.NRO_TARJETA,'''',''));
			SET nroTarjetaEncriptado = encriptarNroTarjeta(REPLACE(refRegis.NRO_TARJETA,'''',''));
			-- validacion tipo documento			
			-- validacion numero de documento
			-- (2) Insertar nueva afiliación
			CALL insertarNuevaAfiliacion(CAST(refMqrfh2.Metadata.idComercio AS INTEGER),
							refRegis.COD_PRODUCTO,
							nroTarjetaEnmascarado,
							nroTarjetaEncriptado,
							CAST(refRegis.NRO_MES_EXPIRACION_TARJETA AS INTEGER),
							CAST(refRegis.NRO_ANHO_EXPIRACION_TARJETA AS INTEGER),
							intTipoDocumento,
							numeroDocumento,--CAMBIO NUEVO --
							--COALESCE(refRegis.TITULAR_NRO_DOCUMENTO,'11111111'),
							refRegis.NOM_TARJETAHABIENTE,
							refRegis.APE_PATERNO_TARJETAHABIENTE,
							refRegis.APE_MATERNO_TARJETAHABIENTE,
							refRegis.TELEFONO_TARJETAHABIENTE,
							refRegis.EMAIL_TARJETAHABIENTE,
							REPLACE(refRegis.NRO_IDENTIFICACION_BENEFICIARIO,'''',''),
							refRegis.NOM_BENEFICIARIO,
							refRegis.APE_PATERNO_BENEFICIARIO,
							refRegis.APE_MATERNO_BENEFICIARIO,
							tipoCargo,
							CAST(REPLACE(refRegis.MTO_MAXIMO_CARGO,'''','') AS DECIMAL),
							CAST(REPLACE(refRegis.MTO_CARGO,'''','') AS DECIMAL),
							obtenerTimestampSinHora(inFecPago),
							intTipoPeriocidad,
							refMqrfh2.Metadata.codigoUsuarioCreacion,
							refMqrfh2.Metadata.ipCreacion,
							CAST(refMqrfh2.idTransaccion AS INTEGER),
							intFlagReintento,
							outIdProducto,
							outCantMesesVigencia,
							outIdAfiliacion,
							outFecCaducidad,
							outResultadoMsj,
							outResultado);
							
		DECLARE campo NAME (CAST(outIdAfiliacion AS CHARACTER));		
			
			IF outResultado = 0 THEN
				SET outResultFail = 1;
			ELSE
				SET outResultOk = 1;
			END IF;

			SET Environment.cantidadRegistrosOk = CAST(COALESCE(Environment.cantidadRegistrosOk ,0)AS INTEGER) + outResultOk;
			SET Environment.cantidadRegistrosFail = CAST(COALESCE(Environment.cantidadRegistrosFail ,0)AS INTEGER) + outResultFail;												  	

			IF outIdAfiliacion IS NULL THEN
				--SET OutputRoot.XMLNSC.MENSAJE.ERROR = 'NO SE REGISTRO AFILIACION DEBIDO :: ' || outResultadoMsj; 
			ELSE
				--INSERTO EN LA LISTA DE AFILIACIONES QUE FUERON IMPACTADAS EN LA BD
				/*CREATE LASTCHILD OF refFila NAME 'AFILIACION';
				MOVE refFila LASTCHILD;
				SET refFila.IDAFILIACION = outIdAfiliacion;
				SET refFila.IDPRODUCTO = outIdProducto;
				SET refFila.IDCOMERCIO = refMqrfh2.Metadata.idComercio;
				SET refFila.FECPAGO = inFecPago;
				SET refFila.PERIODICIDAD = intTipoPeriocidad;
				SET refFila.FECCADUCIDAD = outFecCaducidad;
				SET refFila.MTOCARGO = refRegis.MTO_CARGO;
				MOVE refFila PARENT;
				*/
				--
				-- GENERAR CARGOS
				DECLARE indice INTEGER 1;
				DECLARE outIdLote INTEGER;
				/*DECLARE fecCargo DATE obtenerSiguienteFechaCargo(obtenerFechaMenosMeses(inFecPago,1),
				intTipoPeriocidad,
				EXTRACT(DAY FROM inFecPago));*/ --cambio importacion periodicidad
				DECLARE fecCargo DATE obtenerPrimeraFechaCargo(inFecPago,intTipoPeriocidad);--cambio importacion periodicidad
				
				--Cambio fec_proceso 2802 primer cargo 12/11/2015
				DECLARE inMes INTEGER EXTRACT(MONTH FROM inFecPago);
				DECLARE inDia INTEGER -1;
				IF  inMes = 2 AND (EXTRACT(DAY FROM inFecPago) = 28 OR EXTRACT(DAY FROM inFecPago)=29) THEN
					SET inDia = 30;
				ELSE
					SET inDia = EXTRACT(DAY FROM inFecPago);
				END IF;
				--SET OutputRoot.XMLNSC.MENSAJE.fecCargo = fecCargo;
				SET Environment.Variables.FEC_CARGO = fecCargo;
				SET Environment.Variables.FEC_CADUCIDAD = outFecCaducidad;
				
				WHILE fecCargo < outFecCaducidad DO
									
					CALL obtenerLoteIngresarActualizarSiExiste(outIdProducto,
										obtenerTimestampSinHora(fecCargo),
										1, -- NUM CARGOS
										CAST(REPLACE(refRegis.MTO_CARGO,'''','') AS DECIMAL),
										0, --ESTADO LOTE (PENDIENTE)
										CURRENT_TIMESTAMP,
										refMqrfh2.Metadata.codigoUsuarioCreacion,
										refMqrfh2.Metadata.ipCreacion,
										CAST(refMqrfh2.Metadata.idComercio AS INTEGER),
										outIdLote);
					
										DECLARE outIdCargo INTEGER;
										CALL insertarCargo(outIdAfiliacion,
										outIdLote,
										obtenerTimestampSinHora(fecCargo),
										CAST(REPLACE(refRegis.MTO_CARGO,'''','') AS DECIMAL(14,2)), --11/09
										0, -- NUMERO DE REINTENTOS
										0, --ESTADO CARGO (PENDIENTE),
										CURRENT_TIMESTAMP,
										refMqrfh2.Metadata.codigoUsuarioCreacion,
										refMqrfh2.Metadata.ipCreacion,
										outIdCargo);
				
					--Cambio fec_proceso 2802 sgte cargo 12/11/2015
					--SET fecCargo = obtenerSiguienteFechaCargo(fecCargo,intTipoPeriocidad,EXTRACT(DAY FROM fecCargo));
					SET fecCargo = obtenerSiguienteFechaCargo(fecCargo,intTipoPeriocidad,inDia);
					
					SET Environment.campo.renovacion.FEC_CARGO[indice] = fecCargo; --IMPRIMIR				
					SET indice = indice +1;
				END WHILE;
				
				--SET OutputRoot.XMLNSC.MENSAJE.ERROR = 'Se generaron correctamente los cargos para la afiliacion: ' || CAST(outIdAfiliacion AS CHARACTER);
			END IF;
			
			--Arma una lista con los errores que ocurran para escribirlos en un archivo
			IF (outResultado = 0) THEN --Imprime en el archivo log, solo aquellos que contengan error de lógica negocio
				SET refError.nro_registro = COALESCE(refRegis.NRO_RECORD,'');
				SET refError.mensaje = outResultadoMsj;
				SET refError.codigo = obtenerRespuestaPorCodigo(outResultado);
				--Req 7: nro beneficario logs
				SET refError.nro_beneficiario = REPLACE(refRegis.NRO_IDENTIFICACION_BENEFICIARIO,'''','');
				--Req 7: fin
				CREATE LASTCHILD OF Environment.XMLNSC.resultado NAME 'error';
				MOVE refError NEXTSIBLING;
				
			END IF;
			SET outResultFail = 0;
			SET outResultOk = 0;
			
			MOVE refRegis NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;
		
		DELETE LASTCHILD OF Environment.XMLNSC.resultado;
			  
 		-- Envio de la lista de logs de los registros que tuvieron erores
 		
 		DECLARE refError1 REFERENCE TO Environment.XMLNSC.resultado.error;
 
		WHILE LASTMOVE(refError1) DO
 		
			SET OutputRoot.XMLNSC.resultado = refError1;
	
			SET OutputLocalEnvironment.Destination.File.Directory = COALESCE(Environment.MQRFH2.usr.Parametros.Servicio.PATHFILERROR,Environment.MQRFH2.usr.Parametros.ESB.PATHFILERROR) || 'temp/';
			SET OutputLocalEnvironment.Destination.File.Name = refMqrfh2.nombreArchivo || '.log'; --Req 26 - 021232015
	
			PROPAGATE TO TERMINAL 1;
			MOVE refError1 NEXTSIBLING REPEAT TYPE NAME;
		END WHILE;
		
		--GENERO LOS CARGOS							
	/*	DECLARE refAfiliacion REFERENCE TO Environment.XMLNSC.RECORDS.AFILIACION;
		DECLARE indice INTEGER 1;		
		WHILE LASTMOVE(refAfiliacion) DO			
		 DECLARE fecCargo DATE obtenerSiguienteFechaCargo(obtenerFechaMenosMeses(refAfiliacion.FECPAGO,1),
				refAfiliacion.PERIODICIDAD,
				EXTRACT(DAY FROM refAfiliacion.FECPAGO));
				WHILE fecCargo < refAfiliacion.FECCADUCIDAD DO
					SET OutputRoot.MQMD.Format = 'MQHRF2  ';
					SET OutputRoot.MQRFH2.usr = Environment.MQRFH2.usr;
					SET OutputRoot.MQMD.CorrelId = CAST(InputBody.MENSAJE.IDTRANSACCION AS BLOB);					
					SET OutputRoot.XMLNSC.MENSAJE.IDGRUPO=
				/*	      L.ID_PRODUCTO = P_ID_PRODUCTO
                AND C.ID_COMERCIO = P_ID_COMERCIO
                AND TIMESTAMP(FEC_PROCESO_PAGO) = TIMESTAMP(P_FEC_ESTIMADA_PAGO)*/
				END WHILE;
		END WHILE;
		*/
		--
		
		--Envio de la validacion del fin de archivo
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = 'IB.BTH.GENBTH.CTRLFINPROCESO.REQ.01';
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName = InputBody.MENSAJE.QMPROCESO;


		SET OutputRoot.MQMD.Format = 'MQHRF2  ';
		SET OutputRoot.MQRFH2.usr = Environment.MQRFH2.usr;
		SET OutputRoot.XMLNSC.MENSAJE.IDGRUPO = InputBody.MENSAJE.IDGRUPO;
		SET OutputRoot.XMLNSC.MENSAJE.IDTRANSACCION = InputBody.MENSAJE.IDTRANSACCION;

		PROPAGATE TO TERMINAL 2;
		
		--Envio de los totales de registros que fueron impactados en BD

		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = 'IB.BTH.IMPAFI.CTRLREGISTRO.REQ.01';
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName = InputBody.MENSAJE.QMPROCESO;
		SET OutputRoot.MQMD.Format = 'MQHRF2  ';
		SET OutputRoot.MQMD.CorrelId = CAST(InputBody.MENSAJE.IDTRANSACCION AS BLOB);
		SET OutputRoot.MQRFH2.usr = Environment.MQRFH2.usr;
		SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROS = Environment.cantidadRegistros ;
		SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROSOK = Environment.cantidadRegistrosOk ;
		SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROSFAIL = Environment.cantidadRegistrosFail;

		PROPAGATE TO TERMINAL 3;
		SET Environment.Variables.Registros = NULL;
		RETURN FALSE;
	END;

END MODULE;


CREATE COMPUTE MODULE MF_ESB_BTH_REGARCHIVO_AFILIACION_BD_ControlarError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		SET OutputRoot = InputRoot;

		PROPAGATE TO TERMINAL 1;

		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = 'IB.BTH.IMPAFI.CTRLREGISTRO.REQ.01';
		SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueManagerName = InputBody.MENSAJE.QMPROCESO;
		SET OutputRoot.MQMD.Format = 'MQHRF2  ';
		SET OutputRoot.MQMD.CorrelId = CAST(InputBody.MENSAJE.IDTRANSACCION AS BLOB);
		SET OutputRoot.MQRFH2.usr = InputRoot.MQRFH2.usr;
		SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROS = InputBody.MENSAJE.TOTALREGISTROS ;
		SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROSOK = 0 ;
		SET OutputRoot.XMLNSC.MENSAJE.CANTIDADREGISTROSFAIL = InputRoot.XMLNSC.MENSAJE.REGISTROSGRUPO ;

		PROPAGATE TO TERMINAL 2;

		RETURN FALSE;
	END;
END MODULE;