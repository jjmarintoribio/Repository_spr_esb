BROKER SCHEMA ib.visa.esb.bth.renovacion
PATH ib.visa.esb.bth;

		
CREATE COMPUTE MODULE MF_ESB_BTH_RENOVA_AUTO_INICIO_ObtenerAfiliacionesARenovar
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.refParam = InputRoot.MQRFH2.usr.Parametros;		
		
		DECLARE refParam REFERENCE TO Environment.refParam;
		DECLARE cantSolAfi INTEGER 0;
		DECLARE fecRenovacionBuscar DATE;
		
		-- TODO: LUEGO ELIMINARLO
		--SET refParam.Batch.fechaProceso ='2029-01-05 00:00:00';
		SET fecRenovacionBuscar			= obtenerFechaMasDias(CAST(SUBSTRING(refParam.Batch.fechaProceso FROM 1 FOR 10) AS DATE FORMAT getFORMATO_FECHA_BD()),
																CAST( refParam.Servicio.CANDIASPREVREN AS INTEGER));
																
		-- ((1)) Buscar Solicitud de Afiliaciones con estado pendiente 
		CALL buscarAfiliacionesPorRenovar(fecRenovacionBuscar,Environment.resultSetAfiliaciones[]);
										 
		SET cantSolAfi = CARDINALITY(Environment.resultSetAfiliaciones[]);
		DECLARE refAfiliacionRenovar REFERENCE TO Environment.resultSetAfiliaciones;
		
		-- ((1.0)) Grabar proceso para obtener el id de transaccion
			
			DECLARE intIdTransaccion INTEGER;
			CALL insertarProcesoMantenimiento(
											getID_PROCESO_6(),
											getTIP_PROC_MANT_RENOAUT(),
											CURRENT_TIMESTAMP,
											CURRENT_TIMESTAMP,
											intIdTransaccion);
			SET refParam.Batch.idTransaccion	= CAST(intIdTransaccion AS CHARACTER);
			
			
		-- ((1.1)) Existen solicitud de afiliaciones
		
		IF cantSolAfi > 0 THEN
			
			SET refParam.Batch.msgIdTransaccion	= getMsgId(); --identificador unico del procesamiento de un archivo			
			SET Environment.cantidad.registro 	= 0;
			SET Environment.cantidad.grupo 	= 1;		
			
			
			-- ((2.2)) Grabar log proceso
			CALL armarMensajeLogProceso(OutputRoot,
										CAST(refParam.Batch.idProceso AS CHARACTER), 
										CAST(refParam.Batch.idTransaccion AS CHARACTER),   
										getTIP_LOG_INFO(),
										MessageFlowLabel,
										'Se inicio el proceso de renovacion automatica para  : ' || CAST(cantSolAfi AS CHARACTER) || ' afiliaciones.');
										
			PROPAGATE TO LABEL 'LOGPROCESO';
			
			--((2.3)) Envio de alertas al inicio del proceso
		
			IF (COALESCE(refParam.Servicio.NOTIFICA,getNO())= getSI()) THEN
				CALL prepararMensajeCorreoAlerta(OutputRoot,getTIPO_ALERTA_1(),refParam,NULL,NULL);
				--PROPAGATE TO LABEL 'ALERTAS'; Req-42-02022016
				PROPAGATE TO LABEL 'CORREO'; --Req-42-02022016
			END IF;
	
			--((2.4)) Envio de mensaje con los Parametros para el control de alertas 
						
			--SET OutputRoot.XMLNSC 		= NULL;
			--SET OutputRoot.MQMD.Format 	= 'MQHRF2  '; 
			--SET OutputRoot.MQRFH2.usr.Parametros = refParam;
			--PROPAGATE TO LABEL 'CORREO'; Req-42-02022016
			--PROPAGATE TO LABEL 'ALERTAS'; --Req-42-02022016 se comenta todo el control xq no se especifico alertas en este proceso

			WHILE LASTMOVE(refAfiliacionRenovar) DO
					
					--((3.0))Se envia un mensaje por cada grupo de mensajes
					
					IF ( Environment.cantidad.registro 	= refParam.Servicio.CANREGTRANS1) THEN
					
						SET OutputRoot.MQMD.CorrelId  		= refParam.Batch.msgIdTransaccion; -- para obtener todos los grupos con el get cuando se termine de leer el file
					  
						SET OutputRoot.MQRFH2.usr = refParam;   
						SET OutputRoot.XMLNSC.MENSAJE.IDTRANSACCION	= refParam.Batch.msgIdTransaccion;
						SET OutputRoot.XMLNSC.MENSAJE.IDGRUPO		= getMsgIdValor((getEST_ACTIVO() || CAST(Environment.cantidad.grupo AS CHARACTER)),FALSE);
						SET OutputRoot.XMLNSC.MENSAJE.REGISTROSGRUPO= Environment.cantidad.registro;
						SET OutputRoot.XMLNSC.MENSAJE.FECHAPROCESO 	= refParam.Batch.fechaProceso;
						
		
						SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaRecepArchivo(refParam.General.IDENTIFICADOR);
						PROPAGATE TO LABEL 'RCVARCHIVO';
		
						SET Environment.cantidad.registro 	= 0;
						SET Environment.cantidad.grupo 		= CAST(Environment.cantidad.grupo AS INTEGER) + 1;				
						
					END IF;
					
					-- ((3.1)) Se envia el detalle de cada registro a la cola temporal de recepcion 
					SET Environment.cantidad.registro 	= CAST(Environment.cantidad.registro AS INTEGER) + 1;  				
					SET OutputRoot.MQMD.CorrelId  	= getMsgIdValor((getEST_ACTIVO() || CAST(Environment.cantidad.grupo AS CHARACTER)),FALSE);
					
					SET OutputRoot.XMLNSC = NULL;
					CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
					SET OutputRoot.XMLNSC.MENSAJE.AfiliacionRenovacion.ID_AFILIACION 	  	= refAfiliacionRenovar.ID_AFILIACION;
					SET OutputRoot.XMLNSC.MENSAJE.AfiliacionRenovacion.CTD_MESES_VIGENCIA 	= refAfiliacionRenovar.CTD_MESES_VIGENCIA;
					SET OutputRoot.XMLNSC.MENSAJE.AfiliacionRenovacion.NRO_VIGENCIA_CADUCIDAD_AFILIACION = refAfiliacionRenovar.NRO_VIGENCIA_CADUCIDAD_AFILIACION;
					SET OutputRoot.XMLNSC.MENSAJE.AfiliacionRenovacion.FEC_PAGO 		  	= refAfiliacionRenovar.FEC_PAGO;
					SET OutputRoot.XMLNSC.MENSAJE.AfiliacionRenovacion.TIPO_PERIODICIDAD  	= refAfiliacionRenovar.TIPO_PERIODICIDAD;
					SET OutputRoot.XMLNSC.MENSAJE.AfiliacionRenovacion.MTO_CARGO 		  	= refAfiliacionRenovar.MTO_CARGO;
					SET OutputRoot.XMLNSC.MENSAJE.AfiliacionRenovacion.Producto.ID_PRODUCTO = refAfiliacionRenovar.ID_PRODUCTO;
					
					SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaRecepArchivoDetalle(refParam.General.IDENTIFICADOR);				
					PROPAGATE TO LABEL 'REGARCHIVODET';					
					MOVE refAfiliacionRenovar NEXTSIBLING REPEAT TYPE NAME;
					
				
			END WHILE;
			
			--((4.1)) Envio de mensajes para el control de la secuencia
			
			SET OutputRoot.MQMD.Priority					= 1; --Prioridad con la que seran atendidos cuando el semaforo esta en verde
			SET OutputRoot.MQMD.CorrelId					= getMsgIdValor(refParam.General.IDENTIFICADOR,TRUE);
			
			SET OutputRoot.XMLNSC = NULL;
			CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
			
			SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.TOTALREGISTROS = CAST(Environment.cantidad.registro AS INTEGER);
			SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.IDTRANSACCION	= refParam.Batch.msgIdTransaccion;
			SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.FECHAPROCESO 	= refParam.Batch.fechaProceso;
			SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.COLAGETRECEP	= obtenerColaRecepArchivo(refParam.General.IDENTIFICADOR);
			SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.HORARIO	 	= refParam.Servicio.CANREGTRANS1;
			SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.COLAHORARIO 	= 'IB.BTH.RENOVAUTO.REGARCHIVO.REQ.01';
			SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.CANREGTRANS	= refParam.Servicio.CANREGTRANS1;
			SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.CANGRUPOS		= Environment.cantidad.grupo;
			SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.QMPROCESO		= QueueManagerName;			
			SET OutputRoot.XMLNSC.MENSAJE.Cuerpo.PROCESAR 		= getSI();	
			SET OutputRoot.XMLNSC.MENSAJE.Parametros			= refParam; --Se pone los parametros aqui para que no de problemas en el mqget del controlador de secuencia
	
			PROPAGATE TO LABEL 'RCVCONTROLSEC';
			
			--((5)) Envio del grupo de los ultimos registros del archivo
	
			SET OutputRoot.MQMD.CorrelId  	= refParam.Batch.msgIdTransaccion;		
			SET OutputRoot.MQRFH2.usr = refParam;  
			SET OutputRoot.XMLNSC.MENSAJE.IDTRANSACCION	 = refParam.Batch.msgIdTransaccion;
			SET OutputRoot.XMLNSC.MENSAJE.IDGRUPO		 = getMsgIdValor((getEST_ACTIVO() || CAST(Environment.cantidad.grupo AS CHARACTER)),FALSE);
			SET OutputRoot.XMLNSC.MENSAJE.REGISTROSGRUPO = Environment.cantidad.registro;
			SET OutputRoot.XMLNSC.MENSAJE.FECHAPROCESO 	 = refParam.Batch.fechaProceso;
	
			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaRecepArchivo(refParam.General.IDENTIFICADOR);	
			PROPAGATE TO LABEL 'RCVARCHIVO';

			
		
			ELSE
				
			CALL armarMensajeLogProceso(OutputRoot,
									CAST(refParam.Batch.idProceso AS CHARACTER), 
									CAST(refParam.Batch.idTransaccion AS CHARACTER),   
									getTIP_LOG_INFO(),
									MessageFlowLabel,
									'No se encontraron afiliaciones a renovar con fecha de vencimiento: ' || obtenerFechaActual(4));
									
			PROPAGATE TO LABEL 'LOGPROCESO';
		
		END IF;
		
		RETURN TRUE;
	END;

END MODULE;
