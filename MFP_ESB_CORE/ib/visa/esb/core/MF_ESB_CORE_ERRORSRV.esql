/*
 *
 * Nombre		: MF_ESB_CORE_ERRORSRV.esql
 * Proposito	: Flujo de control de errores de los flujos especificos del ESB
 * Fecha		: 2011-01-12
 * Autores		: Ruben Mejia - Synopsis
 * Version		: 1.0
 * 
 *--------------------------------------------------------------------
 */

BROKER SCHEMA ib.visa.esb.core 


CREATE COMPUTE MODULE MF_ESB_CORE_ERRORSRV_PrepararRespuestaError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		--((0)) Preparacion del mensaje de auditoria
		SET OutputRoot.Properties = InputProperties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		SET OutputRoot.MQRFH2.usr.Parametros = InputRoot.MQRFH2.usr.Parametros;
		
		DECLARE refRespuesta REFERENCE TO InputRoot.MQRFH2.usr.ResultadoInvocacion;

		--Validacion si se registra la auditoria 

		-- Si el error ocurrio en los flujos de salida genericos entonces ya no se registra el log de auditoria de error porque ya se registra en las salidas.
		IF refRespuesta.codigoRespuesta <> getCOD_ERROR_1010() AND refRespuesta.codigoRespuesta <> getCOD_ERROR_1012() THEN  
	 
			CALL armarAuditoriaEventoError(OutputRoot,
									InputRoot.MQMD.CorrelId,
									InputRoot.MQRFH2.usr,
									CAST(refRespuesta.codigoRespuesta AS INTEGER),
									refRespuesta.descripcion,
									InputExceptionList,
									NULL,NULL);
			
			--Asignacion dinamica de la cola de entrada del flujo especifico
			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = getCOLA_ENTRADA_FLUJO_AUDITORIA();
	
			PROPAGATE TO TERMINAL 1;
			
		END IF;
		
		--Preparacion de respuestas segun el protocolo de entrada y el tipo de servicio del consumidor y proveedor


		IF refRespuesta.codigoRespuesta = getCOD_ERROR_1018() OR  --error no controlado en flujos de servicio
			refRespuesta.codigoRespuesta = getCOD_ERROR_1013() OR  --error de validaciones de campos de entrada del servicio
			refRespuesta.codigoRespuesta = getCOD_ERROR_1010() OR  --error al invocar el servicio proveedor
			refRespuesta.codigoRespuesta = getCOD_ERROR_1012() THEN --error en timeout en el servicio proveedor

			DECLARE chrProtocolo CHARACTER InputRoot.MQRFH2.usr.Parametros.Protocolo.TipoProtocolo;
			--Se asigna la cola generica de respuesta del protocolo
			SET OutputLocalEnvironment.Destination.MQ.DestinationData.queueName = obtenerColaEntradaProtocoloRespuesta(InputRoot.MQRFH2.usr);
	
			IF chrProtocolo = getPROTOCOLO_ENTRADA_MQ() OR chrProtocolo = getPROTOCOLO_ENTRADA_TCP() THEN
	
				IF FIELDNAME(InputRoot.MQRFH2.usr.CabecerasInput.HeaderService) IS NOT NULL THEN
					-- Preparacion del mensaje de respuesta al cliente con el mensaje de error
					SET OutputRoot.Properties = InputProperties;
					CALL setearPropiedadesMensaje(OutputRoot,'MS_ESB_CORE_INPUTMQ','MSG_MQ','CWF1');
	
					SET OutputRoot.MQMD = InputRoot.MQMD;
	
					SET OutputRoot.MQMD.MsgId = CAST(InputRoot.MQRFH2.usr.Parametros.Protocolo.Datos.MsgId AS BLOB);
					SET OutputRoot.MQMD.CorrelId = OutputRoot.MQMD.MsgId;
	
					SET OutputRoot.MQRFH2.usr.Parametros.Protocolo.Datos = InputRoot.MQRFH2.usr.Parametros.Protocolo.Datos;
	
					SET OutputRoot.MRM.MENSAJE.CABECERA = InputRoot.MQRFH2.usr.CabecerasInput.HeaderService;
	
					SET OutputRoot.MRM.MENSAJE.CABECERA.TIP_RESPUESTA = refRespuesta.tipoCodigo;
					SET OutputRoot.MRM.MENSAJE.CABECERA.COD_RESPUESTA = refRespuesta.codigoRespuesta;
					SET OutputRoot.MRM.MENSAJE.CABECERA.DES_RESPUESTA = fill(refRespuesta.descripcion,30,' ',FALSE);
	
					SET OutputRoot.MRM.MENSAJE.CUERPO.DATA = refRespuesta.descripcion;
	
				END IF;
				
				--Preparacion del cuerpo del mensaje para enviarlo al flujo de respuesta segun el protocolo
				DECLARE blbMsg BLOB ASBITSTREAM(OutputRoot.MRM OPTIONS EmbeddedBitStream);
				SET OutputRoot.BLOB.BLOB = blbMsg;
	
				SET OutputRoot.MRM = NULL;
	
			ELSEIF chrProtocolo =  getPROTOCOLO_ENTRADA_HTTP() THEN
	
				SET OutputRoot.Properties = InputProperties;
				CALL setearPropiedadesMensaje(OutputRoot,'MS_ESB_CORE_INPUTHTTP','MENSAJERES','');
	
				SET OutputRoot.MQMD = InputRoot.MQMD;
				SET OutputRoot.MQRFH2.usr.Parametros.Protocolo.Datos = InputRoot.MQRFH2.usr.Parametros.Protocolo.Datos;
	
	
				--((4)) Preparacion del mensaje Soap de respuesta generica
				DECLARE nsVISA NAMESPACE InputRoot.MQRFH2.usr.Parametros.Protocolo.Datos.Namespace;
				DECLARE nsSOAP NAMESPACE getNS_SOAP(); 

				CALL prepararEnvelopeSoapRespESB(OutputRoot,InputRoot.MQRFH2.usr,nsSOAP,nsVISA,InputRoot.MQRFH2.usr.Parametros.Protocolo.Datos.Namespace,
										refRespuesta.tipoCodigo,
										CAST(refRespuesta.codigoRespuesta AS INTEGER),
										refRespuesta.descripcion);
	
			ELSEIF chrProtocolo =  getPROTOCOLO_ENTRADA_JSON() THEN
	
				SET OutputRoot.Properties = InputProperties;
	
				SET OutputRoot.MQMD = InputRoot.MQMD;
				SET OutputRoot.MQRFH2.usr.Parametros.Protocolo.Datos = InputRoot.MQRFH2.usr.Parametros.Protocolo.Datos;
	 
				CALL prepararEnvelopeJSONRespESB(OutputRoot,InputRoot.MQRFH2.usr,Environment);	
			END IF;
	
			PROPAGATE TO TERMINAL 2;

		END IF;

		RETURN FALSE;

	END;


END MODULE;